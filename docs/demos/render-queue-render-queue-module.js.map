{"version":3,"sources":["./src/app/features/template/strategies/render-queue/core/static-schedule-and-coalesce-global.ts","./src/app/features/template/strategies/render-queue/render-queue/child.component.ts","./src/app/features/template/strategies/render-queue/render-queue/render-queue.component.ts","./src/app/features/template/strategies/render-queue/render-queue/render-queue.component.html","./src/app/features/template/strategies/render-queue/render-queue.routes.ts","./src/app/features/template/strategies/render-queue/core/global-task-manager.ts","./src/app/features/template/strategies/render-queue/core/globalAnimationFrameTick.ts","./src/app/features/template/strategies/render-queue/core/global-render.strategy.ts","./src/app/features/template/strategies/render-queue/render-queue.module.ts"],"names":[],"mappings":"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","file":"render-queue-render-queue-module.js","sourcesContent":["import { globalTaskManager, GlobalTaskPriority, GlobalTaskScope } from './global-task-manager';\n\nexport function coalesceAndScheduleGlobal(\n    work: () => void,\n    priority: GlobalTaskPriority,\n    scope: object = {},\n    abC: AbortController = new AbortController()\n): AbortController {\n    return staticScheduleGlobal(work, scope, priority, abC);\n}\n\nfunction staticScheduleGlobal(\n    task: () => void,\n    scope: GlobalTaskScope,\n    priority: GlobalTaskPriority,\n    abC: AbortController = new AbortController()\n): AbortController {\n    const scheduledWork = {\n        work: () => {\n            if (!abC.signal.aborted) {\n                task();\n            }\n        },\n        scope,\n        priority\n    };\n    globalTaskManager.scheduleTask(scheduledWork);\n    const abortHandler = function() {\n        globalTaskManager.deleteTask(scheduledWork);\n        abC.signal.removeEventListener('abort', abortHandler, false);\n    };\n    abC.signal.addEventListener('abort', abortHandler, false);\n\n    return abC;\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { getGlobalRenderingStrategies } from '../core/global-render.strategy';\nimport { Renderable } from '../interfaces';\n\n@Component({\n  selector: 'rxa-child',\n  template: `\n    <rxa-dirty-check class=\"renders\"></rxa-dirty-check>\n    <table>\n      <tr *ngFor=\"let item of items\">\n        <td>{{ item }}</td>\n      </tr>\n    </table>\n  `,\n  styles: [\n    `\n      :host {\n        position: relative;\n        width: 150px;\n        height: 150px;\n        border: 1px red solid;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        overflow: scroll;\n      }\n      .renders {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChildComponent extends RxState<Renderable<ChildComponent>>\n  implements OnInit, OnDestroy {\n  numItems = 100;\n\n  destroyed = new Subject();\n\n  doRenderChunked = new Subject<string>();\n  doRenderBlocking = new Subject<string>();\n\n  items = Array.from(Array(this.numItems).keys()).map(() => Math.random());\n\n  private strategies;\n\n  constructor(private cdRef: ChangeDetectorRef) {\n    super();\n    this.set({ self: this });\n  }\n\n  ngOnInit() {\n    this.strategies = getGlobalRenderingStrategies({ cdRef: this.cdRef });\n    this.hold(\n      this.doRenderBlocking.pipe(\n        tap(() => this.updateItems()),\n        this.strategies.blocking.rxScheduleCD\n      ),\n      () => {\n        //console.log('rendered', this);\n      }\n    );\n    this.hold(\n      this.doRenderChunked.pipe(\n        tap(() => this.updateItems()),\n        this.strategies.chunk.rxScheduleCD\n      ),\n      () => {\n        //console.log('rendered', this);\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.destroyed.complete();\n  }\n\n  renderStatic(strategyName: string) {\n    this.updateItems();\n    this.strategies[strategyName].scheduleCD();\n  }\n\n  private updateItems(): void {\n    this.items = Array.from(Array(this.numItems).keys()).map(() =>\n      Math.random()\n    );\n  }\n}\n","import { AfterViewInit, ChangeDetectorRef, Component, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\n\nimport { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { getGlobalRenderingStrategies } from '../core/global-render.strategy';\nimport { Renderable } from '../interfaces';\nimport { ChildComponent } from './child.component';\n\n@Component({\n  selector: 'rxa-render-queue',\n  templateUrl: './render-queue.component.html',\n  styleUrls: ['./render-queue.component.css']\n})\nexport class RenderQueueComponent\n  extends RxState<Renderable<RenderQueueComponent>>\n  implements OnInit, AfterViewInit {\n\n  @ViewChildren(ChildComponent) childComponents: QueryList<ChildComponent>;\n\n  toggle = true;\n  numChildren = 10;\n\n  doRender = new Subject();\n\n  items = Array.from(Array(this.numChildren).keys());\n\n  constructor(private cdRef: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    const strategy = getGlobalRenderingStrategies({ cdRef: this.cdRef })\n      .chunk;\n    this.hold(\n      this.doRender.pipe(\n        tap(\n          () =>\n            (this.items = Array.from(Array(this.numChildren).keys()).map(() =>\n              Math.random()\n            ))\n        ),\n        strategy.rxScheduleCD\n      ),\n      () => {\n        console.log('rendered', this);\n      }\n    );\n  }\n\n  ngAfterViewInit() {}\n\n  updateChildrenBlocking() {\n    this.childComponents.forEach(child => child.doRenderBlocking.next());\n  }\n\n  updateChildrenStaticBlocking() {\n    this.childComponents.forEach(child => child.renderStatic('blocking'));\n  }\n\n  updateChildrenChunked() {\n    this.childComponents.forEach(child => child.doRenderChunked.next());\n  }\n\n  updateChildrenStaticChunked() {\n    this.childComponents.forEach(child => child.renderStatic('chunk'));\n  }\n\n  doToggle() {\n    this.toggle = !this.toggle;\n  }\n\n  renderSelf(): void {\n    this.doRender.next();\n  }\n\n  renderMixed(): void {\n    this.renderChild2();\n    this.renderChild2();\n    this.renderChild2();\n    this.renderChild1();\n    this.renderChild1();\n    this.renderChild1();\n  }\n\n  renderChild2(): void {\n    //this.child2.doRender.next();\n    //this.child2.doRender.next();\n  }\n\n  renderChild1(): void {\n    //this.child1.doRender.next();\n    //this.child1.doRender.next();\n  }\n}\n","<div>\n  <strong>Chunked</strong>\n  <button mat-raised-button [unpatch] (click)=\"updateChildrenChunked()\">\n    updateChildrenChunked\n  </button>\n</div>\n<div>\n  <strong>Blocking</strong>\n\n  <button mat-raised-button [unpatch] (click)=\"updateChildrenBlocking()\">\n    updateChildrenBlocking\n  </button>\n</div>\n<rxa-dirty-check></rxa-dirty-check>\n<div class=\"render-queue-wrapper\">\n  <rxa-child *ngFor=\"let item of items\"></rxa-child>\n</div>\n","import { Routes } from '@angular/router';\nimport { RenderQueueComponent } from './render-queue/render-queue.component';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: RenderQueueComponent,\n  },\n];\n","import { getZoneUnPatchedApi } from '@rx-angular/template';\nimport { Observable, Subject } from 'rxjs';\n\nexport const animFrame = getZoneUnPatchedApi('requestAnimationFrame');\nconst cancelAnimFrame = getZoneUnPatchedApi('cancelAnimationFrame');\n\nexport enum GlobalTaskPriority {\n    chunk,\n    blocking\n}\n\nexport type GlobalTaskScope = object;\n\nexport interface GlobalTask {\n    work: (...args: any[]) => void;\n    priority: GlobalTaskPriority;\n    scope: GlobalTaskScope;\n}\n\ninterface ScheduledGlobalTask extends GlobalTask {\n    rescheduled?: number;\n}\n\ninterface GlobalTaskManager {\n    scheduleTask(task: GlobalTask): void; // Observable<void> ?\n    deleteTask(task: GlobalTask): void;\n    tick(): Observable<void>;\n}\n\n// PLAY AROUND WITH THIS IF YOU WANT TO CHANGE FRAME SIZE!\nconst frameThresh = 16;\nconst rescheduleMax = 3;\n\nfunction createGlobalTaskManager(): GlobalTaskManager {\n    const queue = new Map<GlobalTaskScope, ScheduledGlobalTask>();\n    const tick = new Subject<void>();\n    const tick$ = tick;\n    let isScheduled = false;\n\n    return {\n        scheduleTask,\n        tick: () => tick$,\n        deleteTask\n    };\n\n    function deleteTask(taskDefinition: GlobalTask) {\n        queue.delete(taskDefinition.scope);\n    }\n\n    function scheduleTask(taskDefinition: GlobalTask) {\n        (taskDefinition as ScheduledGlobalTask).rescheduled = 0;\n        queue.set(taskDefinition.scope, taskDefinition);\n        if (!isScheduled) {\n            isScheduled = true;\n            const finishScheduling = () => (isScheduled = false);\n            scheduleAndExhaust$().subscribe({\n                next: () => tick.next(),\n                error: finishScheduling,\n                complete: finishScheduling\n            });\n        }\n    }\n\n    function tasks() {\n        return Array.from(queue.entries(), def => def[1]).sort(\n            (a, b) => a.priority - b.priority\n        );\n    }\n\n    function size(): number {\n        return queue.size;\n    }\n\n    function runTask(task: () => void): number {\n        const start = performance.now();\n        task();\n        const end = performance.now();\n        return end - start;\n    }\n\n    function scheduleAndExhaust$(): Observable<void> {\n        return new Observable<void>(subscriber => {\n            let frameId;\n            function exhaust() {\n                if (size() > 0) {\n                    let runtime = 0;\n                    // fetch tasks as array and sort them by priority\n                    const remainingTasks = tasks();\n                    // amount of blocking tasks in the current queue\n                    let blockingTasksLeft = remainingTasks.filter(\n                        def => def.priority === GlobalTaskPriority.blocking\n                    ).length;\n                    // exhaust queue while there are tasks AND (there are blocking tasks left to process OR the runtime exceeds\n                    // 16ms)\n                    while (\n                        (blockingTasksLeft > 0 || runtime <= frameThresh) &&\n                        remainingTasks.length > 0\n                        ) {\n                        // TODO: consider using pop over shift! (render inside-out)\n                        const taskDefinition = remainingTasks.shift();\n                        const chunkTask =\n                            taskDefinition.priority === GlobalTaskPriority.chunk;\n                        // make sure to run all tasks marked with blocking priority and chunk tasks which got rescheduled at\n                        // least 2 times regardless of the runtime!\n                        if (\n                            !chunkTask ||\n                            runtime <= frameThresh ||\n                            taskDefinition.rescheduled >= rescheduleMax\n                        ) {\n                            // measure task runtime and add it to the runtime of this frame\n                            runtime += runTask(taskDefinition.work);\n                            if (!chunkTask) {\n                                blockingTasksLeft--;\n                            }\n                            // delete work from queue\n                            deleteTask(taskDefinition);\n                            // console.warn(`running ${ chunkTask ? 'chunk' : 'blocking' } task. total runtime:`, runtime);\n                        } else {\n                            taskDefinition.rescheduled++;\n                        }\n                    }\n                    cancelAnimFrame(frameId);\n                    if (size() > 0) {\n                        // queue has entries left -> reschedule\n                        // console.warn('rescheduling:', size());\n                        // cancelAnimationFrame(frameId);\n                        frameId = animFrame(exhaust);\n                        subscriber.next();\n                    } else {\n                        // queue is empty -> exhaust completed\n                        // console.warn('exhaust completed');\n                        subscriber.next();\n                        subscriber.complete();\n                    }\n                } else {\n                    // queue is empty -> exhaust completed\n                    subscriber.next();\n                    subscriber.complete();\n                }\n            }\n            // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n            frameId = animFrame(exhaust);\n        });\n    }\n}\n\nexport const globalTaskManager = createGlobalTaskManager();\n","import { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { filter, map, switchMap, switchMapTo, tap } from 'rxjs/operators';\nimport { GlobalTask, globalTaskManager } from './global-task-manager';\n\nexport function scheduleOnGlobalTick<T>(\n  workDefinitionFn: () => GlobalTask\n): MonoTypeOperatorFunction<T> {\n  // Local queue of references of the work function needed to dispose their execution\n  let scheduledTask: GlobalTask;\n  const depleteQueue$ = new Observable<void>(subscriber => {\n    subscriber.next();\n    return () => {\n      if (scheduledTask) {\n          globalTaskManager.deleteTask(scheduledTask);\n          scheduledTask = null;\n      }\n    };\n  });\n  return (o$: Observable<T>) => {\n    // To clarify\n\n    // If we could switchMap into the next schedule call\n    // switchMap(() => globalWorker.scheduleTask(scheduledTask))\n    // pro: do less work in global queue\n    // cons: end up in eternal scheduling\n\n    // Is it important to tie the signal of an executed work to the related scheduled work,\n    // meaning maintaining the order of emission?\n    return depleteQueue$.pipe(\n      switchMapTo(o$),\n      switchMap(val => {\n        const inputTask = workDefinitionFn();\n        if (scheduledTask) {\n            globalTaskManager.deleteTask(scheduledTask);\n        }\n        let workDone = false;\n        scheduledTask = {\n            priority: inputTask.priority,\n            work: () => {\n                inputTask.work();\n                workDone = true;\n            },\n            scope: inputTask.scope\n        }\n        globalTaskManager.scheduleTask(scheduledTask);\n        return globalTaskManager.tick()\n            .pipe(\n                filter(() => workDone),\n                tap(() => {\n                    scheduledTask = null;\n                    workDone = false;\n                }),\n                map(() => val),\n            );\n      })\n    );\n  };\n}\n","import { RenderStrategy, RenderStrategyFactoryConfig } from '@rx-angular/template';\nimport { tap } from 'rxjs/operators';\nimport { GlobalTaskPriority } from './global-task-manager';\nimport { scheduleOnGlobalTick } from './globalAnimationFrameTick';\nimport { coalesceAndScheduleGlobal } from './static-schedule-and-coalesce-global';\n\n/**\n * Experimental Local Strategies\n *\n * - ɵDC - `ɵdetectChanges`\n * - C - `Component`\n * - det - `cdRef.detach`\n * - ret - `cdRef.reattach`\n * - Pr - `Promise`\n * - aF - `requestAnimationFrame`\n *\n * | Name        | ZoneLess | Render Method | ScopedCoalescing | Scheduling | Chunked |\n * |-------------| ---------| --------------| ---------------- | ---------- |-------- |\n * | `local`     | ✔        | ɵDC           | C + Pr           | aF         | ❌      |\n * | `detach`    | ✔ ️     | ret,ɵDC, det  | C + Pr           | aF         | ❌      |\n *\n */\n\nexport function getGlobalRenderingStrategies<T>(\n    config: RenderStrategyFactoryConfig\n): { [strategy: string]: RenderStrategy } {\n    return {\n        chunk: createChunkStrategy(config),\n        blocking: createBlockingStrategy(config),\n        detach: createDetachChunkStrategy(config),\n        detachChunk: createDetachChunkStrategy(config),\n        detachBlocking: createDetachBlockingStrategy(config)\n    };\n}\n\nfunction afterCoalesceAndSchedule<R>(work: () => void, afterCD?: () => R) {\n    work();\n    if (afterCD) {\n        afterCD();\n    }\n}\n\nexport function createBlockingStrategy<T>(\n    config: RenderStrategyFactoryConfig\n): RenderStrategy {\n    const component = config.cdRef;\n    const taskPriority = GlobalTaskPriority.blocking;\n\n    const renderMethod = () => {\n        config.cdRef.detectChanges();\n    };\n    const behavior = o =>\n        o.pipe(\n            scheduleOnGlobalTick(() => ({\n                priority: taskPriority,\n                work: renderMethod,\n                scope: component\n            }))\n        );\n\n    const scheduleCD = <R>(afterCD?: () => R) =>\n        coalesceAndScheduleGlobal(() => {\n            afterCoalesceAndSchedule(renderMethod, afterCD);\n        }, taskPriority, component);\n\n    return {\n        name: 'blocking',\n        detectChanges: renderMethod,\n        rxScheduleCD: behavior,\n        scheduleCD\n    };\n}\n\nexport function createChunkStrategy<T>(\n    config: RenderStrategyFactoryConfig\n): RenderStrategy {\n    const taskPriority = GlobalTaskPriority.chunk;\n    const component = config.cdRef;\n\n    const renderMethod = () => {\n        config.cdRef.detectChanges();\n    };\n    const behavior = o =>\n        o.pipe(\n            scheduleOnGlobalTick(() => ({\n                priority: taskPriority,\n                work: renderMethod,\n                scope: component\n            }))\n        );\n\n    const scheduleCD = <R>(afterCD?: () => R) =>\n        coalesceAndScheduleGlobal(() => {\n            afterCoalesceAndSchedule(renderMethod, afterCD);\n        }, taskPriority, component);\n\n    return {\n        name: 'chunk',\n        detectChanges: renderMethod,\n        rxScheduleCD: behavior,\n        scheduleCD\n    };\n}\n\nexport function createDetachChunkStrategy<T>(\n    config: RenderStrategyFactoryConfig\n): RenderStrategy {\n    const component = config.cdRef;\n    const taskPriority = GlobalTaskPriority.chunk;\n    const renderMethod = () => {\n        config.cdRef.reattach();\n        config.cdRef.detectChanges();\n        config.cdRef.detach();\n    };\n    const behavior = o =>\n        o.pipe(\n            tap(() => config.cdRef.detach()),\n            scheduleOnGlobalTick(() => ({\n                priority: taskPriority,\n                work: renderMethod,\n                scope: component\n            }))\n        );\n\n    const scheduleCD = <R>(afterCD?: () => R) => {\n        config.cdRef.detach();\n        return  coalesceAndScheduleGlobal(() => {\n            afterCoalesceAndSchedule(renderMethod, afterCD);\n        }, taskPriority, component);\n    }\n\n    return {\n        name: 'detachChunk',\n        detectChanges: renderMethod,\n        rxScheduleCD: behavior,\n        scheduleCD\n    };\n}\n\nexport function createDetachBlockingStrategy<T>(\n    config: RenderStrategyFactoryConfig\n): RenderStrategy {\n    const component = config.cdRef;\n    const taskPriority = GlobalTaskPriority.blocking;\n    const renderMethod = () => {\n        config.cdRef.reattach();\n        config.cdRef.detectChanges();\n        config.cdRef.detach();\n    };\n    const behavior = o =>\n        o.pipe(\n            tap(() => config.cdRef.detach()),\n            scheduleOnGlobalTick(() => ({\n                priority: taskPriority,\n                work: renderMethod,\n                scope: component\n            }))\n        );\n\n    const scheduleCD = <R>(afterCD?: () => R) => {\n        config.cdRef.detach();\n        return  coalesceAndScheduleGlobal(() => {\n            afterCoalesceAndSchedule(renderMethod, afterCD);\n        }, taskPriority, component);\n    }\n\n    return {\n        name: 'detachBlocking',\n        detectChanges: renderMethod,\n        rxScheduleCD: behavior,\n        scheduleCD\n    };\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { UnpatchEventsModule } from '@rx-angular/template';\nimport { RenderQueueComponent } from './render-queue/render-queue.component';\nimport { ChildComponent } from './render-queue/child.component';\nimport { ROUTES } from './render-queue.routes';\nimport { DirtyChecksModule } from '../../../../shared/debug-helper/dirty-checks';\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n  declarations: [RenderQueueComponent, ChildComponent],\n  imports: [\n    CommonModule,\n    UnpatchEventsModule,\n    RouterModule.forChild(ROUTES),\n    DirtyChecksModule,\n    MatButtonModule\n  ]\n})\nexport class RenderQueueModule {\n}\n"],"sourceRoot":"webpack:///"}