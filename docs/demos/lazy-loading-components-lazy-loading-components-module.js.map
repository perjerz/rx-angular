{"version":3,"sources":["./src/app/shared/utils/cd-helper.ts","./src/app/features/template/rx-let/lazy-loading-components/lazy-loading-components.routes.ts","./src/app/features/template/rx-let/lazy-loading-components/lazy-loading-components.module.ts","./src/app/features/template/rx-let/lazy-loading-components/lazy-loading-components.component.ts"],"names":[],"mappings":"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","file":"lazy-loading-components-lazy-loading-components-module.js","sourcesContent":["import { ApplicationRef, ChangeDetectorRef, Injectable, ɵdetectChanges, ɵmarkDirty } from '@angular/core';\n\n\n@Injectable()\nexport class CdHelper {\n\n  constructor(\n    protected cdRef: ChangeDetectorRef,\n    protected appRef: ApplicationRef\n  ) {}\n\n  appRef_tick() {\n    this.appRef.tick();\n  }\n cdRef_detectChanges() {\n    this.cdRef.detectChanges();\n  }\n\n  cdRef_markForCheck() {\n    this.cdRef.markForCheck();\n  }\n\n  markDirty() {\n    ɵmarkDirty((this.cdRef as any).context);\n  }\n\n  detectChanges() {\n    ɵdetectChanges((this.cdRef as any).context);\n  }\n}\n","import { LazyLoadingComponentsComponent } from './lazy-loading-components.component';\n\nexport const ROUTES = [\n  {\n    path: '',\n    component: LazyLoadingComponentsComponent\n  }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES } from './lazy-loading-components.routes';\nimport { LazyLoadingComponentsComponent } from './lazy-loading-components.component';\nimport { LetModule, UnpatchEventsModule } from '@rx-angular/template';\nimport { GhostElementsModule } from '../../../../shared/ghost-elements';\nimport { MatButtonModule } from '@angular/material/button';\nimport { VisualizerModule } from '../../../../shared/debug-helper/visualizer';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\nconst DECLARATIONS = [\n  LazyLoadingComponentsComponent\n];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ROUTES),\n    LetModule,\n    UnpatchEventsModule,\n    GhostElementsModule,\n    MatButtonModule,\n    VisualizerModule,\n    MatButtonToggleModule\n  ]\n})\nexport class LazyLoadingComponentsModule {\n\n}\n","import { ChangeDetectionStrategy, Component, ComponentFactoryResolver } from '@angular/core';\nimport { defer, Subject } from 'rxjs';\nimport { delay, scan, shareReplay, switchMap } from 'rxjs/operators';\nimport { RxEffects } from '../../../../shared/rx-effects.service';\nimport { CdHelper } from '../../../../shared/utils/cd-helper';\n\n@Component({\n  selector: 'rxa-lazy-loading-components',\n  template: `\n    <rxa-visualizer>\n      <div visualizerHeader>\n        <h2>Lazy Loading Components</h2>\n        <mat-button-toggle-group name=\"visibleExamples\"\n                                 aria-label=\"Visible Examples\"\n                                 [value]=\"displayStates.all\"\n                                 #group=\"matButtonToggleGroup\">\n          <mat-button-toggle [value]=\"displayStates.await\">Async Await</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.observable\">Observable</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.all\">All</mat-button-toggle>\n        </mat-button-toggle-group>\n        <br/>\n        <button mat-raised-button (click)=\"toggleSubject.next();\">Toggle</button>\n      </div>\n      <div class=\"w-100 row\">\n        <div class=\"col\" *ngIf=\"group.value === displayStates.await || group.value === displayStates.all\">\n          <h3>Resolving over async/await</h3>\n          <ng-template #suspenseAwaitView>\n            <rxa-list-item-ghost></rxa-list-item-ghost>\n          </ng-template>\n          <ng-container *ngIf=\"componentAwait; else: suspenseAwaitView\" [ngComponentOutlet]=\"componentAwait\"></ng-container>\n        </div>\n        <div class=\"col\" *ngIf=\"group.value === displayStates.observable || group.value === displayStates.all\">\n          <h3>Resolving over Observable</h3>\n          <ng-template #suspenseView>\n            <rxa-list-item-ghost></rxa-list-item-ghost>\n          </ng-template>\n          <ng-container [ngComponentOutlet]=\"c\" *rxLet=\"component$; let c; rxSuspense:suspenseView\"></ng-container>\n        </div>\n      </div>\n    </rxa-visualizer>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [CdHelper]\n})\nexport class LazyLoadingComponentsComponent extends RxEffects {\n  displayStates = {\n    await: 0,\n    observable: 1,\n    all: 2\n  };\n  toggleSubject = new Subject<boolean>();\n  toggle$ = this.toggleSubject.pipe(\n    scan(b => !b, false),\n    delay(1000)\n  );\n\n  componentAwait;\n\n  component$ = this.toggle$.pipe(\n      switchMap(b => b ? this.cA() : this.cB()),\n      shareReplay(1)\n    );\n\n  cA = () => import('./lazy-component-a.component').then(c => c.component);\n  cB = () => import('./lazy-component-b.component').then(c => c.component);\n\n  constructor(\n    private cdHelper: CdHelper\n  ) {\n    super();\n    this.hold(this.toggle$, (b) => this.awaiting(b));\n  }\n\n  async awaiting(b: boolean) {\n    this.componentAwait = await (b ? this.cA() : this.cB());\n    this.cdHelper.cdRef_detectChanges();\n  }\n\n}\n"],"sourceRoot":"webpack:///"}