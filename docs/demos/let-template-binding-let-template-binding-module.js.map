{"version":3,"sources":["/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/util/tryCatch.js","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/observable/fromPromise.js","./src/app/features/template/rx-let/let-template-binding/let-template-binding.module.ts","./src/app/features/template/rx-let/let-template-binding/examples/let-template-binding-subject-example.component.ts","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/util/root.js","./src/app/features/template/rx-let/let-template-binding/let-template-binding.component.ts","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal-compatibility/index.js","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/observable/dom/WebSocketSubject.js","./src/app/features/template/rx-let/let-template-binding/let-template-binding.routes.ts","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/util/errorObject.js","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/observable/fromIterable.js","./src/app/features/template/rx-let/let-template-binding/examples/let-template-binding-http-example.component.ts","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/observable/dom/AjaxObservable.js","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/util/applyMixins.js","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/observable/dom/webSocket.js","./src/app/features/template/rx-let/let-template-binding/to-string.pipe.ts","/home/runner/work/rx-angular/rx-angular/node_modules/rxjs/_esm2015/internal/observable/dom/ajax.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAa;AAChD;AACA,2BAA2B,gDAAO;AAClC;AACA;AACA;AACA,mBAAmB,sDAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,2CAA2C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,+BAA+B,sDAAU;AACzC;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0CAA0C,4DAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;A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AAsB;;6FA2DnB,sCAAsC;cAvGlD,uDAAS;eAAC;gBACT,QAAQ,EAAE,uCAAuC;gBACjD,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqET;gBACD,MAAM,EAAE;oBACN;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2BC;iBACF;aACF;;;;;;;;;;;;;;AC3GD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACO;AACA;AACJ;AAC1C;AACA,QAAQ,+CAAI;AACZ,mBAAmB,+CAAI;AACvB;AACA,eAAe,+CAAI;AACnB,mBAAmB,+CAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+CAAI;AACZ,mBAAmB,+CAAI;AACvB;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA,4BAA4B,+CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACO;AACP,+BAA+B,8BAA8B;AAC7D;AACO;AACP,+BAA+B,qCAAqC;AACpE;AACO;AACP,+BAA+B,iCAAiC;AAChE;AACO;AACP,+BAA+B,oCAAoC;AACnE;AACO;AACP,+BAA+B,sCAAsC;AACrE;AACA,oBAAoB,0DAAG;AAChB;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,6BAA6B,sDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,6BAA6B,sDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAI,qCAAqC,+CAAI;AACjF,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB,oDAAoD,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAI,6BAA6B,+CAAI;AACtD;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB,GAAG,8BAA8B;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,oBAAoB,+CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAA0C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,0C;;;;;;;;;;;;ACtWA;AAAA;AAAO;AACP,2CAA2C,SAAS;AACpD;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAsD;AAC/C;AACP,eAAe,kEAAgB;AAC/B;AACA,qC;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAoD;;AAK7C,MAAM,YAAY;IACvB,SAAS,CAAC,KAAa;QACrB,OAAO,KAAK,GAAG,EAAE,CAAC;IACpB,CAAC;;wEAHU,YAAY;0GAAZ,YAAY;6FAAZ,YAAY;cAHxB,kDAAI;eAAC;gBACJ,IAAI,EAAE,UAAU;aACjB;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAkD;AAC3C,oBAAoB,8DAAc;AACzC,gC","file":"let-template-binding-let-template-binding-module.js","sourcesContent":["import { errorObject } from './errorObject';\nlet tryCatchTarget;\nfunction tryCatcher() {\n    errorObject.e = undefined;\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n    finally {\n        tryCatchTarget = undefined;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map","import { Observable } from '../Observable';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nimport { schedulePromise } from '../scheduled/schedulePromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return schedulePromise(input, scheduler);\n    }\n}\n//# sourceMappingURL=fromPromise.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES } from './let-template-binding.routes';\nimport { LetTemplateBindingComponent } from './let-template-binding.component';\nimport { LetTemplateBindingHttpExampleComponent } from './examples/let-template-binding-http-example.component';\nimport { LetTemplateBindingSubjectExampleComponent } from './examples/let-template-binding-subject-example.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { LetModule, PushModule, UnpatchEventsModule } from '@rx-angular/template';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { ToStringPipe } from './to-string.pipe';\n\nconst DECLARATIONS = [\n  ToStringPipe,\n  LetTemplateBindingComponent,\n  LetTemplateBindingHttpExampleComponent,\n  LetTemplateBindingSubjectExampleComponent,\n];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ROUTES),\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    UnpatchEventsModule,\n    PushModule,\n    MatBadgeModule,\n    LetModule,\n  ],\n})\nexport class LetTemplateBindingModule {}\n","import { Component } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { scan, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-let-template-binding-subject-example',\n  template: `\n    <mat-card class=\"card\">\n      <mat-card-header>\n        <h1>Subject</h1>\n        <button class=\"btn-reset\" mat-button (click)=\"reset()\">\n          <mat-icon>refresh</mat-icon>RESET\n        </button>\n      </mat-card-header>\n\n      <mat-card-content>\n        <div\n          *rxLet=\"\n            signals$;\n            let count;\n            strategy: visibleStrategy;\n            rxComplete: complete;\n            rxError: error;\n            rxSuspense: suspense\n          \"\n        >\n          value emitted\n          <h2>{{ count | json }}</h2>\n        </div>\n      </mat-card-content>\n\n      <mat-card-actions>\n        <button mat-button [unpatch] (click)=\"signals$.complete()\">\n          COMPLETE\n        </button>\n        <button\n          mat-button\n          [matBadge]=\"signalsCount$ | push | toString\"\n          [matBadgeHidden]=\"(signalsCount$ | push) === 0\"\n          [unpatch]\n          (click)=\"signals$.next(random())\"\n        >\n          NEXT\n        </button>\n        <button mat-button [unpatch] (click)=\"signals$.error(errorStub)\">\n          ERROR\n        </button>\n      </mat-card-actions>\n    </mat-card>\n\n    <ng-template #complete>\n      <div>\n        <mat-icon class=\"notification-icon complete-icon\">thumb_up</mat-icon>\n        <h2>Completed!</h2>\n      </div>\n    </ng-template>\n    <ng-template #error>\n      <div>\n        <mat-icon class=\"notification-icon error-icon\">thumb_down</mat-icon>\n        <h2>Something went wrong...</h2>\n      </div>\n    </ng-template>\n    <ng-template #suspense>\n      <mat-progress-spinner\n        [diameter]=\"80\"\n        [color]=\"'primary'\"\n        [mode]=\"'indeterminate'\"\n      ></mat-progress-spinner>\n    </ng-template>\n  `,\n  styles: [\n    `\n      h1 {\n        margin: 0;\n      }\n\n      mat-card-content {\n        min-height: 10rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .notification-icon {\n        font-size: 5rem;\n        height: initial;\n        width: initial;\n      }\n\n      .btn-reset {\n        margin-left: 2rem;\n      }\n\n      .card {\n        margin: 2rem;\n        text-align: center;\n        width: 20rem;\n      }\n\n      .complete-icon {\n        color: forestgreen;\n      }\n\n      .error-icon {\n        color: darkred;\n      }\n    `,\n  ],\n})\nexport class LetTemplateBindingSubjectExampleComponent {\n  errorStub = new Error('Template observable error!');\n  visibleStrategy = 'local';\n  signals$: Subject<number>;\n  signalsCount$: Observable<number>;\n\n  constructor() {\n    this.reset();\n  }\n\n  random() {\n    return Math.random();\n  }\n\n  reset() {\n    this.signals$ = new Subject<any>();\n    this.signalsCount$ = this.signals$.pipe(\n      scan((acc) => acc + 1, 0),\n      startWith(0)\n    );\n  }\n}\n","const __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root = __window || __global || __self;\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'rxa-let-template-binding',\n  template: `\n    <rxa-let-template-binding-subject-example></rxa-let-template-binding-subject-example>\n    <rxa-let-template-binding-http-example></rxa-let-template-binding-http-example>\n  `,\n})\nexport class LetTemplateBindingComponent {}\n","export { config } from '../internal/config';\nexport { InnerSubscriber } from '../internal/InnerSubscriber';\nexport { OuterSubscriber } from '../internal/OuterSubscriber';\nexport { Scheduler } from '../internal/Scheduler';\nexport { AnonymousSubject } from '../internal/Subject';\nexport { SubjectSubscription } from '../internal/SubjectSubscription';\nexport { Subscriber } from '../internal/Subscriber';\nexport { fromPromise } from '../internal/observable/fromPromise';\nexport { fromIterable } from '../internal/observable/fromIterable';\nexport { ajax } from '../internal/observable/dom/ajax';\nexport { webSocket } from '../internal/observable/dom/webSocket';\nexport { ajaxGet, ajaxPost, ajaxDelete, ajaxPut, ajaxPatch, ajaxGetJSON, AjaxObservable, AjaxSubscriber, AjaxResponse, AjaxError, AjaxTimeoutError } from '../internal/observable/dom/AjaxObservable';\nexport { WebSocketSubject } from '../internal/observable/dom/WebSocketSubject';\nexport { CombineLatestOperator } from '../internal/observable/combineLatest';\nexport { dispatch } from '../internal/observable/range';\nexport { SubscribeOnObservable } from '../internal/observable/SubscribeOnObservable';\nexport { Timestamp } from '../internal/operators/timestamp';\nexport { TimeInterval } from '../internal/operators/timeInterval';\nexport { GroupedObservable } from '../internal/operators/groupBy';\nexport { defaultThrottleConfig } from '../internal/operators/throttle';\nexport { rxSubscriber } from '../internal/symbol/rxSubscriber';\nexport { iterator } from '../internal/symbol/iterator';\nexport { observable } from '../internal/symbol/observable';\nexport { ArgumentOutOfRangeError } from '../internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from '../internal/util/EmptyError';\nexport { Immediate } from '../internal/util/Immediate';\nexport { ObjectUnsubscribedError } from '../internal/util/ObjectUnsubscribedError';\nexport { TimeoutError } from '../internal/util/TimeoutError';\nexport { UnsubscriptionError } from '../internal/util/UnsubscriptionError';\nexport { applyMixins } from '../internal/util/applyMixins';\nexport { errorObject } from '../internal/util/errorObject';\nexport { hostReportError } from '../internal/util/hostReportError';\nexport { identity } from '../internal/util/identity';\nexport { isArray } from '../internal/util/isArray';\nexport { isArrayLike } from '../internal/util/isArrayLike';\nexport { isDate } from '../internal/util/isDate';\nexport { isFunction } from '../internal/util/isFunction';\nexport { isIterable } from '../internal/util/isIterable';\nexport { isNumeric } from '../internal/util/isNumeric';\nexport { isObject } from '../internal/util/isObject';\nexport { isInteropObservable as isObservable } from '../internal/util/isInteropObservable';\nexport { isPromise } from '../internal/util/isPromise';\nexport { isScheduler } from '../internal/util/isScheduler';\nexport { noop } from '../internal/util/noop';\nexport { not } from '../internal/util/not';\nexport { pipe } from '../internal/util/pipe';\nexport { root } from '../internal/util/root';\nexport { subscribeTo } from '../internal/util/subscribeTo';\nexport { subscribeToArray } from '../internal/util/subscribeToArray';\nexport { subscribeToIterable } from '../internal/util/subscribeToIterable';\nexport { subscribeToObservable } from '../internal/util/subscribeToObservable';\nexport { subscribeToPromise } from '../internal/util/subscribeToPromise';\nexport { subscribeToResult } from '../internal/util/subscribeToResult';\nexport { toSubscriber } from '../internal/util/toSubscriber';\nexport { tryCatch } from '../internal/util/tryCatch';\n//# sourceMappingURL=index.js.map","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (let key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe(x => {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, err => observer.error(err), () => observer.complete());\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (e) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (e) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            this._resetState();\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n//# sourceMappingURL=WebSocketSubject.js.map","import { LetTemplateBindingComponent } from './let-template-binding.component';\n\nexport const ROUTES = [\n  {\n    path: '',\n    component: LetTemplateBindingComponent\n  }\n];\n","export const errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","import { Observable } from '../Observable';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return scheduleIterable(input, scheduler);\n    }\n}\n//# sourceMappingURL=fromIterable.js.map","import { Component } from '@angular/core';\nimport { BehaviorSubject, interval, Subject, throwError } from 'rxjs';\nimport { fromPromise } from 'rxjs/internal-compatibility';\nimport { map, share, switchMap, takeUntil, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-let-template-binding-http-example',\n  template: `\n    <mat-card class=\"card\">\n      <mat-card-header>\n        <h1>HTTP Request</h1>\n      </mat-card-header>\n\n      <mat-card-content>\n        <div\n          *rxLet=\"\n            heroes$;\n            let hero;\n            strategy: visibleStrategy;\n            rxComplete: complete;\n            rxError: error;\n            rxSuspense: suspense\n          \"\n        >\n          random Star Wars character fetched!\n          <h2>{{ hero }}</h2>\n        </div>\n      </mat-card-content>\n\n      <mat-card-actions>\n        <button\n          mat-button\n          [unpatch]\n          *ngIf=\"!(heroes$ | push)\"\n          (click)=\"startFetch()\"\n        >\n          START\n        </button>\n        <button\n          mat-button\n          [unpatch]\n          *ngIf=\"heroes$ | push\"\n          (click)=\"completeFetch()\"\n        >\n          COMPLETE\n        </button>\n        <button\n          mat-button\n          [unpatch]\n          *ngIf=\"heroes$ | push\"\n          (click)=\"errorFetch()\"\n        >\n          ERROR\n        </button>\n      </mat-card-actions>\n    </mat-card>\n\n    <ng-template #complete>\n      <div>\n        <mat-icon class=\"complete-icon\">thumb_up</mat-icon>\n        <h2>Completed!</h2>\n      </div>\n    </ng-template>\n    <ng-template #error>\n      <div>\n        <mat-icon class=\"error-icon\">thumb_down</mat-icon>\n        <h2>Something went wrong...</h2>\n      </div>\n    </ng-template>\n    <ng-template #suspense>\n      <mat-progress-spinner\n        [diameter]=\"80\"\n        [color]=\"'primary'\"\n        [mode]=\"'indeterminate'\"\n      ></mat-progress-spinner>\n    </ng-template>\n  `,\n  styles: [\n    `\n      mat-card-content {\n        min-height: 10rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      mat-icon {\n        font-size: 5rem;\n        height: initial;\n        width: initial;\n      }\n\n      .card {\n        margin: 2rem;\n        text-align: center;\n        width: 20rem;\n      }\n\n      .complete-icon {\n        color: forestgreen;\n      }\n\n      .error-icon {\n        color: darkred;\n      }\n    `,\n  ],\n})\nexport class LetTemplateBindingHttpExampleComponent {\n  visibleStrategy = 'local';\n  start$ = new Subject();\n  complete$ = new Subject();\n  error$ = new BehaviorSubject<Error>(undefined);\n  heroes$ = this.start$.pipe(\n    switchMap(() => {\n      return interval(1500).pipe(\n        withLatestFrom(this.error$),\n        switchMap(([_, error]) => {\n          if (error) {\n            return throwError(error);\n          } else {\n            return fromPromise(\n              fetch(\n                `https://swapi.dev/api/people/${\n                  Math.floor(Math.random() * 50) + 1\n                }`\n              ).then((a) => a.json())\n            );\n          }\n        }),\n        map((hero) => hero.name || hero.detail || 'Not found')\n      );\n    }),\n    share(),\n    takeUntil(this.complete$)\n  );\n\n  startFetch() {\n    this.start$.next();\n    this.start$.complete();\n  }\n\n  completeFetch() {\n    this.complete$.next();\n    this.complete$.complete();\n  }\n\n  errorFetch() {\n    this.error$.next(new Error('Fetch Error!'));\n    this.error$.complete();\n  }\n}\n","import { root } from '../../util/root';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\nfunction getCORSRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else if (!!root.XDomainRequest) {\n        return new root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else {\n        let progId;\n        try {\n            const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (let i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nexport function ajaxGet(url, headers = null) {\n    return new AjaxObservable({ method: 'GET', url, headers });\n}\nexport function ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url, body, headers });\n}\nexport function ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url, headers });\n}\nexport function ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url, body, headers });\n}\nexport function ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url, body, headers });\n}\nconst mapResponse = map((x, index) => x.response);\nexport function ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url,\n        responseType: 'json',\n        headers\n    }));\n}\nexport class AjaxObservable extends Observable {\n    constructor(urlOrRequest) {\n        super();\n        const request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();\n            },\n            crossDomain: true,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (const prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    _subscribe(subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    }\n}\nAjaxObservable.create = (() => {\n    const create = (urlOrRequest) => {\n        return new AjaxObservable(urlOrRequest);\n    };\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n    return create;\n})();\nexport class AjaxSubscriber extends Subscriber {\n    constructor(destination, request) {\n        super(destination);\n        this.request = request;\n        this.done = false;\n        const headers = request.headers = request.headers || {};\n        if (!request.crossDomain && !this.getHeader(headers, 'X-Requested-With')) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        let contentTypeHeader = this.getHeader(headers, 'Content-Type');\n        if (!contentTypeHeader && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        request.body = this.serializeBody(request.body, this.getHeader(request.headers, 'Content-Type'));\n        this.send();\n    }\n    next(e) {\n        this.done = true;\n        const { xhr, request, destination } = this;\n        let result;\n        try {\n            result = new AjaxResponse(e, xhr, request);\n        }\n        catch (err) {\n            return destination.error(err);\n        }\n        destination.next(result);\n    }\n    send() {\n        const { request, request: { user, method, url, async, password, headers, body } } = this;\n        try {\n            const xhr = this.xhr = request.createXHR();\n            this.setupEvents(xhr, request);\n            if (user) {\n                xhr.open(method, url, async, user, password);\n            }\n            else {\n                xhr.open(method, url, async);\n            }\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            this.setHeaders(xhr, headers);\n            if (body) {\n                xhr.send(body);\n            }\n            else {\n                xhr.send();\n            }\n        }\n        catch (err) {\n            this.error(err);\n        }\n    }\n    serializeBody(body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root.FormData && body instanceof root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            const splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    }\n    setHeaders(xhr, headers) {\n        for (let key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    }\n    getHeader(headers, headerName) {\n        for (let key in headers) {\n            if (key.toLowerCase() === headerName.toLowerCase()) {\n                return headers[key];\n            }\n        }\n        return undefined;\n    }\n    setupEvents(xhr, request) {\n        const progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            const { subscriber, progressSubscriber, request } = xhrTimeout;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            let error;\n            try {\n                error = new AjaxTimeoutError(this, request);\n            }\n            catch (err) {\n                error = err;\n            }\n            subscriber.error(error);\n        }\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                let xhrProgress;\n                xhrProgress = function (e) {\n                    const { progressSubscriber } = xhrProgress;\n                    progressSubscriber.next(e);\n                };\n                if (root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress;\n                }\n                xhrProgress.progressSubscriber = progressSubscriber;\n            }\n            let xhrError;\n            xhrError = function (e) {\n                const { progressSubscriber, subscriber, request } = xhrError;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                let error;\n                try {\n                    error = new AjaxError('ajax error', this, request);\n                }\n                catch (err) {\n                    error = err;\n                }\n                subscriber.error(error);\n            };\n            xhr.onerror = xhrError;\n            xhrError.request = request;\n            xhrError.subscriber = this;\n            xhrError.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            return;\n        }\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n        function xhrLoad(e) {\n            const { subscriber, progressSubscriber, request } = xhrLoad;\n            if (this.readyState === 4) {\n                let status = this.status === 1223 ? 204 : this.status;\n                let response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                if (status === 0) {\n                    status = response ? 200 : 0;\n                }\n                if (status < 400) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    let error;\n                    try {\n                        error = new AjaxError('ajax error ' + status, this, request);\n                    }\n                    catch (err) {\n                        error = err;\n                    }\n                    subscriber.error(error);\n                }\n            }\n        }\n        xhr.onload = xhrLoad;\n        xhrLoad.subscriber = this;\n        xhrLoad.progressSubscriber = progressSubscriber;\n        xhrLoad.request = request;\n    }\n    unsubscribe() {\n        const { done, xhr } = this;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        super.unsubscribe();\n    }\n}\nexport class AjaxResponse {\n    constructor(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n}\nconst AjaxErrorImpl = (() => {\n    function AjaxErrorImpl(message, xhr, request) {\n        Error.call(this);\n        this.message = message;\n        this.name = 'AjaxError';\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n        return this;\n    }\n    AjaxErrorImpl.prototype = Object.create(Error.prototype);\n    return AjaxErrorImpl;\n})();\nexport const AjaxError = AjaxErrorImpl;\nfunction parseJson(xhr) {\n    if ('response' in xhr) {\n        return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n    }\n    else {\n        return JSON.parse(xhr.responseText || 'null');\n    }\n}\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            return parseJson(xhr);\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\nfunction AjaxTimeoutErrorImpl(xhr, request) {\n    AjaxError.call(this, 'ajax timeout', xhr, request);\n    this.name = 'AjaxTimeoutError';\n    return this;\n}\nexport const AjaxTimeoutError = AjaxTimeoutErrorImpl;\n//# sourceMappingURL=AjaxObservable.js.map","export function applyMixins(derivedCtor, baseCtors) {\n    for (let i = 0, len = baseCtors.length; i < len; i++) {\n        const baseCtor = baseCtors[i];\n        const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            const name = propertyKeys[j];\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        }\n    }\n}\n//# sourceMappingURL=applyMixins.js.map","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'toString',\n})\nexport class ToStringPipe implements PipeTransform {\n  transform(value: number): string {\n    return value + '';\n  }\n}\n","import { AjaxObservable } from './AjaxObservable';\nexport const ajax = (() => AjaxObservable.create)();\n//# sourceMappingURL=ajax.js.map"],"sourceRoot":"webpack:///"}