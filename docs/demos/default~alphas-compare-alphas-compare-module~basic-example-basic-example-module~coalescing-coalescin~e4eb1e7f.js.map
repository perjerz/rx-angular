{"version":3,"sources":["/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/let/let.directive.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/scheduling/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/get-global-this.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/template-manager_creator.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/native.strategy.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/static/static-coalesce.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/push/push.pipe.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/static/static-schedule.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/util/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/render-aware/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/local.strategy.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/idleCallback.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/intervalTick.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/unpatch/events/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/viewport-prio/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/unpatch/events/unpatch-events.experimental.module.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/noop.strategy.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/unpatch/events/unpatch-events.experimental.directive.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/let/let.module.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/viewport-prio/viewport-prio.experimental.directive.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/scheduling/animationFrameTick.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/operators/coalesceWith.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/core/utils/view-engine-checks.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/operators/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/properties-weakmap.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/scheduling/promiseTick.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/util/util.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/scheduling/interfaces.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/viewport-prio/viewport-prio.module.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/push/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/static/static-schedule-and-coalesced.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/timeoutTick.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/detach-strategy.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/postTask.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/template.module.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/unpatch/events/unpatch-event-list.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/unpatched-resolved-promise.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/rxjs/scheduling/priority-tick-map.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/push/push.module.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/idleCallbackTick.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/coalescing-manager.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/render-aware/render-aware_creator.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/rx-materialize.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/global.strategy.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/core/utils/zone-checks.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/experimental/render-strategies/rxjs/scheduling/postTaskTick.experimental.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/strategies/strategies-map.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/let/index.ts","/home/runner/work/rx-angular/rx-angular/libs/template/src/lib/render-strategies/static/index.ts"],"names":[],"mappings":"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","file":"default~alphas-compare-alphas-compare-module~basic-example-basic-example-module~coalescing-coalescin~e4eb1e7f.js","sourcesContent":["import { ChangeDetectorRef, Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { Observable, ObservableInput, Subscription, Unsubscribable, } from 'rxjs';\nimport { createRenderAware, RenderAware, RxNotificationKind, StrategySelection } from '../core';\nimport { RxTemplateObserver, RxViewContext } from '../core/model';\nimport { createTemplateManager, TemplateManager, } from '../core/utils/template-manager_creator';\nimport { DEFAULT_STRATEGY_NAME, getStrategies, } from '../render-strategies/strategies/strategies-map';\n\nexport interface LetViewContext<T> extends RxViewContext<T> {\n  // to enable `as` syntax we have to assign the directives selector (var as v)\n  rxLet: T;\n}\n\n/**\n * @Directive LetDirective\n *\n * @description\n *\n * The `*rxLet` directive serves a convenient way of binding observables to a view context. Furthermore, it helps\n * you structure view-related models into view context scope (DOM element's scope).\n *\n * Under the hood, it leverages a `RenderStrategy` which in turn takes care of optimizing the change detection\n * of your component or embedded view. The `LetDirective` will render its template and manage change detection after it\n *   got an initial value. So if the incoming `Observable` emits its value lazily (e.g. data coming from `Http`), your\n *   template will be rendered lazily as well. This can very positively impact the initial render performance of your\n *   application.\n *\n *\n * ### Problems with `async` and `*ngIf`\n *\n * In Angular, a way of binding an observable to the view could look like that:\n * ```html\n * <ng-container *ngIf=\"observableNumber$ | async as n\">\n *   <app-number [number]=\"n\"></app-number>\n *   <app-number-special [number]=\"n\"></app-number-special>\n * </ng-container>\n * ```\n *\n * The problem is that `*ngIf` interferes with rendering and in case of a `0` (a falsy value) the component\n * would be hidden. This issue doesn't concern the `LetDirective`.\n *\n * The `AsyncPipe` relies on the Zone to be present - it doesn't really trigger change detection by itself.\n * It marks the component and its children as dirty waiting for the Zone to trigger change detection. So, in case\n * you want to create a zone-less application, the `AsyncPipe` won't work as desired. `LetDirective` comes\n * with its own strategies to manage change detection every time a new notification is sent from\n * the bound Observable.\n *\n *\n * ### Features of `*rxLet`\n *\n * Included features for `*rxLet`:\n * - binding is always present. (see \"Problems with `async` and `*ngIf`\" section below)\n * - it takes away the multiple usages of the `async` or `push` pipe\n * - a unified/structured way of handling null and undefined\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or\n *   `ChangeDetectorRef.markForCheck`)\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or\n *   `ɵdetectChanges`)\n * - distinct same values in a row (`distinctUntilChanged` operator),\n * - display custom templates for different observable notifications (rxSuspense, rxNext, rxError, rxComplete)\n * - notify about after changes got rendered to the template (RenderCallback)\n *\n *\n * ### Binding an Observable and using the view context\n *\n * The `*rxLet` directive takes over several things and makes it more convenient and save to work with streams in the\n * template:\n *\n * ```html\n * <ng-container *rxLet=\"observableNumber$; let n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n *\n * <ng-container *rxLet=\"observableNumber$ as n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n * ```\n *\n * In addition to that it provides us information from the whole observable context.\n * We can track the observables:\n * - next value\n * - error occurrence\n * - complete occurrence\n *\n * ```html\n * <ng-container *rxLet=\"observableNumber$; let n; let e = $rxError, let c = $rxComplete\">\n *   <app-number [number]=\"n\" *ngIf=\"!e && !c\"></app-number>\n *   <ng-container *ngIf=\"e\">\n *     There is an error: {{ e }}\n *   </ng-container>\n *   <ng-container *ngIf=\"c\">\n *     Observable completed: {{ c }}\n *   </ng-container>\n * </ng-container>\n * ```\n *\n *\n * ### Using the template-binding\n *\n * You can also use template anchors and display template's content for different observable states:\n * - on complete\n * - on error\n * - on suspense - before the first value is emitted\n *\n * ```html\n * <ng-container\n *   *rxLet=\"\n *     observableNumber$;\n *     let n;\n *     rxError: error;\n *     rxComplete: complete;\n *     rxSuspense: suspense;\n *   \"\n * >\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n * <ng-template #error>ERROR</ng-template>\n * <ng-template #complete>COMPLETE</ng-template>\n * <ng-template #suspense>SUSPENSE</ng-template>\n * ```\n *\n * Internally, `*rxLet` is using a simple \"view memoization\" - it caches all anchored template references and re-uses\n * them whenever the observable notification (next/error/complete) is sent. Then, it only updates the context\n * (e.g. a value from the observable) in the view.\n *\n *\n * @docsCategory LetDirective\n * @docsPage LetDirective\n * @publicApi\n */\n@Directive({\n  selector: '[rxLet]',\n  exportAs: 'renderNotifier'\n})\nexport class LetDirective<U> implements OnInit, OnDestroy {\n\n  /** @internal */\n  static ngTemplateGuard_rxLet: 'binding';\n\n  /**\n   * @description\n   * All strategies initialized and registered for the `LetDirective`. Pass a name of one the\n   * `strategies` to the `strategy` input to switch between them on the fly.\n   *\n   * @see {@link strategy}\n   */\n  readonly strategies: StrategySelection;\n\n  /**\n   * @description\n   * Object holding logic for managing strategies and change detection for the `LetDirective`.\n   *\n   * @internal\n   */\n  readonly renderAware: RenderAware<U | null | undefined>;\n\n  /**\n   * @description\n   * The Observable to be bound to the context of a template.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   *\n   * @param potentialObservable\n   */\n  @Input()\n  set rxLet(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.renderAware.nextPotentialObservable(potentialObservable);\n  }\n\n  /**\n   * @description\n   * The rendering strategy to be used when rendering with the reactive context within a template.\n   * Use it to dynamically manage your rendering strategy. You can switch the strategies\n   * imperatively (with a string) or by bounding an Observable.\n   * The default strategy is `'local'`.\n   *\n   * @example\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *     <ng-container *rxLet=\"hero$; let hero; strategy: strategy\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *   `\n   * })\n   * export class AppComponent {\n   *   strategy = 'local';\n   * }\n   *\n   * // OR\n   *\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *     <ng-container *rxLet=\"hero$; let hero; strategy: strategy$\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *   `\n   * })\n   * export class AppComponent {\n   *   strategy$ = new BehaviorSubject('local');\n   * }\n   *\n   * @param strategy\n   * @see {@link strategies}\n   */\n  @Input('rxLetStrategy')\n  set strategy(strategy: string | Observable<string> | undefined) {\n    this.renderAware.nextStrategy(strategy || DEFAULT_STRATEGY_NAME);\n  }\n\n  /**\n   * @description\n   * A template to show if the bound Observable is in \"complete\" state.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero; rxComplete: completeTemplate\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   * <ng-template #completeTemplate>\n   *   <mat-icon>thumb_up</mat-icon>\n   * </ng-template>\n   *\n   * @param templateRef\n   */\n  @Input('rxLetRxComplete')\n  set rxComplete(\n    templateRef: TemplateRef<LetViewContext<U | undefined | null> | null>\n  ) {\n    this.templateManager.addTemplateRef('rxComplete', templateRef);\n  }\n\n  /**\n   * @description\n   * A template to show if the bound Observable is in \"error\" state.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero; rxError: errorTemplate\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   * <ng-template #errorTemplate>\n   *   <mat-icon>thumb_down</mat-icon>\n   * </ng-template>\n   *\n   * @param templateRef\n   */\n  @Input('rxLetRxError')\n  set rxError(\n    templateRef: TemplateRef<LetViewContext<U | undefined | null> | null>\n  ) {\n    this.templateManager.addTemplateRef('rxError', templateRef);\n  }\n\n  /**\n   * @description\n   * A template to show before the first value is emitted from the bound Observable.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero; rxSuspense: suspenseTemplate\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   * <ng-template #suspenseTemplate>\n   *   <mat-progress-spinner></mat-progress-spinner>\n   * </ng-template>\n   *\n   * @param templateRef\n   */\n  @Input('rxLetRxSuspense')\n  set rxSuspense(\n    templateRef: TemplateRef<LetViewContext<U | undefined | null> | null>\n  ) {\n    this.templateManager.addTemplateRef('rxSuspense', templateRef);\n  }\n\n  /** @internal */\n  private subscription: Unsubscribable = Subscription.EMPTY;\n\n  /** @internal */\n  private readonly templateManager: TemplateManager<LetViewContext<U | undefined | null>, RxNotificationKind>;\n\n  /** @internal */\n  private readonly initialViewContext: LetViewContext<U> = {\n    $implicit: undefined,\n    rxLet: undefined,\n    $rxError: false,\n    $rxComplete: false,\n    $rxSuspense: false\n  };\n\n  /** @internal */\n  private readonly templateObserver: RxTemplateObserver<U | null | undefined> = {\n    suspense: () => {\n      this.displayInitialView();\n      this.templateManager.updateViewContext({\n        $implicit: undefined,\n        rxLet: undefined,\n        $rxError: false,\n        $rxComplete: false,\n        $rxSuspense: true\n      });\n    },\n    next: (value: U | null | undefined) => {\n      this.templateManager.displayView('rxNext');\n      this.templateManager.updateViewContext({\n        $implicit: value,\n        rxLet: value\n      });\n    },\n    error: (error: Error) => {\n      // fallback to rxNext when there's no template for rxError\n      this.templateManager.hasTemplateRef('rxError')\n      ? this.templateManager.displayView('rxError')\n      : this.templateManager.displayView('rxNext');\n      this.templateManager.updateViewContext({\n        $rxError: error\n      });\n    },\n    complete: () => {\n      // fallback to rxNext when there's no template for rxComplete\n      this.templateManager.hasTemplateRef('rxComplete')\n      ? this.templateManager.displayView('rxComplete')\n      : this.templateManager.displayView('rxNext');\n      this.templateManager.updateViewContext({\n        $rxComplete: true\n      });\n    }\n  };\n\n  /** @internal */\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown | null | undefined\n  ): ctx is LetViewContext<U> {\n    return true;\n  }\n\n  /** @internal */\n  constructor(\n    cdRef: ChangeDetectorRef,\n    private readonly nextTemplateRef: TemplateRef<LetViewContext<U>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    this.strategies = getStrategies({ cdRef });\n    this.templateManager = createTemplateManager(this.viewContainerRef, this.initialViewContext);\n\n    this.renderAware = createRenderAware({\n      strategies: this.strategies,\n      templateObserver: this.templateObserver\n    });\n    this.renderAware.nextStrategy(DEFAULT_STRATEGY_NAME);\n  }\n\n  /** @internal */\n  ngOnInit() {\n    this.templateManager.addTemplateRef('rxNext', this.nextTemplateRef);\n    this.displayInitialView();\n    this.subscription = this.renderAware.subscribe();\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.templateManager.destroy();\n  }\n\n  /** @internal */\n  private displayInitialView = () => {\n    // Display \"suspense\" template if provided\n    if (this.templateManager.hasTemplateRef('rxSuspense')) {\n      this.templateManager.displayView('rxSuspense');\n    }\n  };\n}\n","export * from './promiseTick';\nexport * from './animationFrameTick';\nexport * from './interfaces';\nexport * from './priority-tick-map';\n","/**\n * @description\n *\n * A fallback for the new `globalThis` reference.\n *\n *  It should be used to replace `window` due to different environments in:\n *  - SSR (Server Side Rendering)\n *  - Tests\n *  - Browser\n *\n *  @return {globalThis} - A reference to globalThis. `window` in the Browser.\n */\nexport function getGlobalThis(): any {\n  return ((window as any) || (self as any) || (globalThis as any)) as any;\n}\n","import { EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\n\nexport interface TemplateManager<C extends object, N extends string = string> {\n\n  /**\n   * @description\n   * Mutates the inner viewContext with the passed object slice.\n   *\n   * @param viewContextSlice - the object holding the new state\n   */\n  updateViewContext(viewContextSlice: Partial<C>): void;\n\n  /**\n   * @description\n   * Adds a template to the internal templateRefCache map.\n   *\n   * @param name\n   * @param templateRef\n   */\n  addTemplateRef(name: N, templateRef: TemplateRef<C>): void;\n\n  /**\n   * @description\n   * Returns a template from the internal templateRefCache map.\n   *\n   * @param name\n   */\n  getEmbeddedView(name: N): EmbeddedViewRef<C> | undefined;\n\n  /**\n   * @description\n   * Checks if `TemplateRef` instance is cached under the provided name.\n   */\n  hasTemplateRef(name: N): boolean;\n\n  /**\n   * @description\n   * Creates and inserts view out of registered templates and caches it for the later\n   * re-usage.\n   *\n   * @param name name of the cached view\n   */\n  displayView(name: N): void;\n\n  /**\n   * @description\n   * Clears all cached views. This should be called if the instance that holds the template manager dies.\n   */\n  destroy(): void;\n}\n\n/**\n * TemplateManager\n *\n * @description\n * This function returns an object that holds the logic for managing templates of a `ViewContainerRef`.\n * It abstracts `EmbeddedView` creation, `insert` calls and `ViewContext` updates.\n * Internally it creates template references lazily by combining caching logic and the `ViewContainerRef#detach` method.\n * The `TemplateManager` lets you re-use templates and insert views on-demand, as well as update the view context\n * (e.g. when a new observable notification is sent).\n *\n * @param viewContainerRef reference to a top-level view container where passed templates will be attached\n * @param initialViewContext initial view context state\n */\nexport function createTemplateManager<C extends object, N extends string = string>(\n  viewContainerRef: ViewContainerRef,\n  initialViewContext: C\n): TemplateManager<C, N> {\n  const templateCache = new Map<N, TemplateRef<C>>();\n  const viewCache = new Map<N, EmbeddedViewRef<C>>();\n  const viewContext = { ...initialViewContext };\n  let activeView: N;\n\n  return {\n    hasTemplateRef(name: N): boolean {\n      return templateCache.has(name);\n    },\n\n    updateViewContext(viewContextSlice: Partial<C>) {\n      Object.entries(viewContextSlice).forEach(([key, value]) => {\n        viewContext[key] = value;\n      });\n    },\n\n    addTemplateRef(name: N, templateRef: TemplateRef<C>) {\n      assertTemplate(name, templateRef);\n      if (!templateCache.has(name)) {\n        templateCache.set(name, templateRef);\n      } else {\n        // @Notice We have to think through how this would work. We also call viewCache.set(name, newView); in insertEmbeddedView\n        throw new Error(\n          'Updating an already existing Template is not supported at the moment.'\n        );\n      }\n    },\n\n    getEmbeddedView(name: N): EmbeddedViewRef<C> {\n        return viewCache.get(name);\n    },\n\n    displayView(name: N) {\n      if (activeView !== name) {\n        if (templateCache.has(name)) {\n          // Detach currently inserted view from the container\n          viewContainerRef.detach();\n\n          if (viewCache.has(name)) {\n            viewContainerRef.insert(viewCache.get(name));\n          } else {\n            // Creates and inserts view to the view container\n            const newView = viewContainerRef.createEmbeddedView(\n              templateCache.get(name),\n              viewContext\n            );\n            viewCache.set(name, newView);\n          }\n        } else {\n          // @NOTICE this is here to cause errors and see in which situations we would throw.\n          // In CDK it should work different.\n          console.error(`A non-existing view was tried to insert ${name}`);\n        }\n\n        activeView = name;\n      }\n    },\n\n    destroy() {\n      viewCache.forEach((view) => view.destroy());\n      viewContainerRef.clear();\n    }\n  };\n}\n\nfunction assertTemplate<T>(\n  property: string,\n  templateRef: TemplateRef<T> | null\n): templateRef is TemplateRef<T> {\n  const isTemplateRefOrNull = !!(\n    !templateRef || templateRef.createEmbeddedView\n  );\n  if (!isTemplateRefOrNull) {\n    throw new Error(\n      `${property} must be a TemplateRef, but received something else.`\n    );\n  }\n  return isTemplateRefOrNull;\n}\n","import { RenderStrategy, RenderStrategyFactoryConfig } from '../../core';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { timeoutTick } from '../../experimental/render-strategies/rxjs/scheduling';\nimport { afterScheduleCD } from '../util';\n\n/**\n * @description\n *\n * Native Strategy\n *\n * @description\n *\n * This strategy mirrors Angular's built-in `async` pipe.\n * This means for every emitted value [`ChangeDetectorRef#markForCheck`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/view_ref.ts#L128) is called.\n * Angular still needs zone.js to trigger the [`ApplicationRef#tick`](https://github.com/angular/angular/blob/7d8dce11c0726cdba999fc59a83295d19e5e92e6/packages/core/src/application_ref.ts#L719) to re-render,\n * as the internally called function [`markViewDirty`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/instructions/shared.ts#L1837) is only responsible for dirty marking and not rendering.\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing    | Scheduling               |\n * | --------- | --------------| ----------------- | ------------- | ------------------------ |\n * | `native`  | ❌            | ⮁ `markForCheck` | ✔ RootContext  | `requestAnimationFrame`  |\n *\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\n * @return {RenderStrategy} - The calculated strategy\n *\n */\nexport function createNativeStrategy(\n  config: RenderStrategyFactoryConfig\n): RenderStrategy {\n  const renderMethod = () => config.cdRef.markForCheck();\n  const cdScheduled = afterScheduleCD(timeoutTick);\n  return {\n    name: 'native',\n    detectChanges: () => renderMethod(),\n    rxScheduleCD: (o) => o.pipe(\n      tap(() => renderMethod()),\n      switchMap(v => timeoutTick().pipe(map(() => v)))\n    ),\n    scheduleCD: <R>(afterCD?: () => R) => {\n      renderMethod();\n      return cdScheduled(afterCD);\n    }\n  };\n}\n","// EXPERIMENTAL\nexport {\n  RenderStrategy,\n  RenderStrategyFactoryConfig,\n  RxNotification\n} from './lib/core/render-aware';\nexport { coalesceWith } from './lib/render-strategies/rxjs/operators/coalesceWith';\nexport { staticCoalesce } from './lib/render-strategies/static';\nexport {\n  UnpatchEventsDirective,\n  UnpatchEventsModule\n} from './lib/experimental/unpatch/events';\nexport {\n  ViewportPrioModule,\n  ViewportPrioDirective\n} from './lib/experimental/viewport-prio';\n// @TODO clarify if we should exports this\nexport { getZoneUnPatchedApi, isNgZone } from './lib/core';\nexport { isViewEngineIvy } from './lib/experimental/core/utils/view-engine-checks.experimental';\n\n// STABLE\nexport {\n TemplateManager, createTemplateManager\n} from './lib/core/utils/template-manager_creator';\nexport {\n  RxViewContext, RxTemplateObserver\n} from './lib/core/model';\n\nexport {\n  getStrategies,\n  priorityTickMap,\n  SchedulingPriority\n} from './lib/render-strategies';\n\nexport { PushPipe, PushModule } from './lib/push';\nexport { LetDirective, LetModule } from './lib/let';\n\nexport { TemplateModule } from './lib/template.module';\n","import { Observable, Subscription } from 'rxjs';\nimport { coalescingManager } from '../../core/utils';\n\n\nexport function staticCoalesce<T>(\n  work: () => T,\n  durationSelector: Observable<any>,\n  scope: object = {},\n  abC: AbortController = new AbortController()\n): AbortController {\n  let sub: Subscription;\n\n  if (!coalescingManager.isCoalescing(scope)) {\n    coalescingManager.add(scope);\n    sub = durationSelector.subscribe(() => {\n      tryExecuteWork();\n    });\n    const abortHandler = function() {\n      sub.unsubscribe();\n      abC.signal.removeEventListener('abort', abortHandler, false);\n    };\n    abC.signal.addEventListener('abort', abortHandler, false);\n  }\n\n  return abC;\n\n  // =====\n\n  function tryExecuteWork(): T | void {\n    coalescingManager.remove(scope);\n    if (!coalescingManager.isCoalescing(scope)) {\n      return work();\n    } else {\n      return void 0;\n    }\n  }\n}\n","import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform } from '@angular/core';\nimport { NextObserver, Observable, ObservableInput, Unsubscribable } from 'rxjs';\nimport { createRenderAware, RenderAware } from '../core';\nimport { RxTemplateObserver } from '../core/model';\nimport { getStrategies } from '../render-strategies';\nimport { DEFAULT_STRATEGY_NAME } from '../render-strategies/strategies/strategies-map';\n\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The `push` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * The current way of binding an observable to the view looks like that:\n *  ```html\n *  {{observable$ | async}}\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | async\"></component>\n * ```\n *\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render all dirty marked\n *     components.\n *\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n *\n * `push` pipe solves that problem.\n *\n * Included Features:\n *  - Take observables or promises, retrieve their values and render the value to the template\n *  - Handling null and undefined values in a clean unified/structured way\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n *  - Distinct same values in a row to increase performance\n *  - Coalescing of change detection calls to boost performance\n *\n * @usageNotes\n *\n * `push` pipe solves that problem. It can be used like shown here:\n * ```html\n * {{observable$ | push}}\n * <ng-container *ngIf=\"observable$ | push as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | push\"></component>\n * ```\n *\n * @publicApi\n */\n@Pipe({ name: 'push', pure: false })\nexport class PushPipe<U> implements PipeTransform, OnDestroy {\n  private renderedValue: U | null | undefined;\n\n  private readonly subscription: Unsubscribable;\n  private readonly RenderAware: RenderAware<U | null | undefined>;\n\n  private readonly templateObserver: RxTemplateObserver<U | null | undefined> = {\n    suspense: () => this.renderedValue = undefined,\n    next: (value: U | null | undefined) => this.renderedValue = value\n  };\n\n  constructor(cdRef: ChangeDetectorRef) {\n    this.RenderAware = createRenderAware<U>({\n      strategies: getStrategies({\n        cdRef\n      }),\n      templateObserver: this.templateObserver\n    });\n    this.subscription = this.RenderAware.subscribe();\n  }\n\n  transform<T>(\n    potentialObservable: null,\n    config?: string | Observable<string>,\n    renderCallback?: NextObserver<U>\n  ): null;\n  transform<T>(\n    potentialObservable: undefined,\n    config?: string | Observable<string>,\n    renderCallback?: NextObserver<U>\n  ): undefined;\n  transform<T>(\n    potentialObservable: ObservableInput<T>,\n    config?: string | Observable<string>,\n    renderCallback?: NextObserver<U>\n  ): T;\n  transform<T>(\n    potentialObservable: ObservableInput<T> | null | undefined,\n    config: string | Observable<string> | undefined,\n    renderCallback?: NextObserver<U>\n  ): T | null | undefined {\n    const strategy = config || DEFAULT_STRATEGY_NAME;\n    this.RenderAware.nextStrategy(strategy);\n    this.RenderAware.nextPotentialObservable(potentialObservable);\n    return this.renderedValue as any;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { priorityTickMap } from '../rxjs/scheduling/priority-tick-map';\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\n\nexport function staticSchedule(\n  work: () => void,\n  priority: false | SchedulingPriority,\n  abC: AbortController = new AbortController()\n): AbortController {\n  // immediately execute work\n  if (priority === false) {\n    tryExecuteWork();\n    return abC;\n  }\n\n  // schedule work\n  const sub = priorityTickMap[priority].subscribe(\n    {\n      // on complete abort further executions\n      complete: () => abC.abort(),\n      next: () => tryExecuteWork()\n    }\n  );\n  const abortHandler = function() {\n    sub.unsubscribe();\n    abC.signal.removeEventListener('abort', abortHandler, false);\n  };\n  abC.signal.addEventListener('abort', abortHandler, false);\n\n  return abC;\n\n  // execute work and abort further executions\n  function tryExecuteWork() {\n    if (!abC.signal.aborted) {\n      work();\n      abC.abort();\n    }\n  }\n}\n","export * from './util';\n","export { getStrategies } from './strategies-map';\nexport { getLocalStrategies } from './local.strategy';\nexport { getGlobalStrategies } from './global.strategy';\nexport { createNativeStrategy } from './native.strategy';\nexport { createNoopStrategy } from './noop.strategy';\n","export * from './postTask.experimental';\nexport * from './postTaskTick.experimental';\nexport * from './idleCallbackTick.experimental';\nexport * from './intervalTick.experimental';\nexport * from './timeoutTick.experimental';\n","export * from './render-aware_creator';\nexport * from './interfaces';\nexport { RxNotification } from '../model';\nexport { RxNotificationKind } from '../model';\nexport { notificationKindToRxNotificationKind } from '../utils/rx-materialize';\nexport { rxMaterialize } from '../utils/rx-materialize';\n","import { coalesceAndSchedule } from '../static';\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\nimport { priorityTickMap } from '../rxjs/scheduling/priority-tick-map';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { RenderStrategy, RenderStrategyFactoryConfig } from '../../core/render-aware';\nimport { coalesceWith } from '../rxjs/operators/coalesceWith';\nimport { promiseTick } from '../rxjs/scheduling/promiseTick';\nimport { afterCoalesceAndSchedule } from '../util';\n\nconst promiseDurationSelector = promiseTick();\n\n/**\n * Local Strategies\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing         | Scheduling                |\n * | --------- | --------------| ----------------- | ------------------ | ------------------------- |\n * | `local`   | ✔             | 🠗 `detectChanges` | ✔ ComponentContext | `requestAnimationFrame`   |\n *\n */\n\nexport function getLocalStrategies<T>(\n  config: RenderStrategyFactoryConfig\n): { [strategy: string]: RenderStrategy } {\n  return {\n    local: createLocalStrategy<T>(config)\n  };\n}\n\n/**\n * @description\n *\n * Local Strategy\n *\n * This strategy is rendering the actual component and\n * all it's children that are on a path\n * that is marked as dirty or has components with `ChangeDetectionStrategy.Default`.\n *\n * As detectChanges has no coalescing of render calls\n * like [`ChangeDetectorRef#markForCheck`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/view_ref.ts#L128) or [`ɵmarkDirty`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/instructions/change_detection.ts#L36) has, so we have to apply our own coalescing, 'scoped' on\n * component level.\n *\n * Coalescing, in this very manner,\n * means **collecting all events** in the same\n * [EventLoop](https://developer.mozilla.org/de/docs/Web/JavaScript/EventLoop) tick, that would cause a re-render and\n * execute **re-rendering only once**.\n *\n * 'Scoped' coalescing, in addition, means **grouping the collected events** by a specific context.\n * E. g. the **component** from which the re-rendering was initiated.\n *\n * This context could be the Component instance or a ViewContextRef,\n * both accessed over the context over `ChangeDetectorRef#context`.\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing         | Scheduling                 |\n * | --------- | --------------| ----------------- | ------------------ | -------------------------- |\n * | `local`   | ✔             | 🠗 `detectChanges` | ✔ ComponentContext | `requestAnimationFrame`   |\n *\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\n * @return {RenderStrategy} - The calculated strategy\n *\n */\nexport function createLocalStrategy<T>(\n  config: RenderStrategyFactoryConfig\n): RenderStrategy {\n  const component = (config.cdRef as any).context;\n  const priority = SchedulingPriority.animationFrame;\n  const tick = priorityTickMap[priority];\n\n  const renderMethod = () => {\n    config.cdRef.detectChanges();\n  };\n  const behavior = (o) =>\n    o.pipe(\n      coalesceWith(promiseDurationSelector, component),\n      switchMap((v) => tick.pipe(map(() => v))),\n      tap(renderMethod)\n    );\n  const scheduleCD = <R>(afterCD?: () => R) =>\n    coalesceAndSchedule(() => {\n      afterCoalesceAndSchedule(renderMethod, afterCD);\n    }, priority, component);\n\n  return {\n    name: 'local',\n    detectChanges: renderMethod,\n    rxScheduleCD: behavior,\n    scheduleCD\n  };\n}\n","export type IdleId = ReturnType<typeof setTimeout>;\n\nexport type RequestIdleCallbackHandle = any;\n\nexport interface RequestIdleCallbackOptions {\n  timeout: number;\n}\n\nexport interface RequestIdleCallbackDeadline {\n  readonly didTimeout: boolean;\n  timeRemaining: () => number;\n}\n\nexport type RequestIdleCallback = (\n  callback: (deadline: RequestIdleCallbackDeadline) => void,\n  opts?: RequestIdleCallbackOptions\n) => RequestIdleCallbackHandle;\n\nexport type CancelIdleCallback = (idleId: IdleId) => void;\n\nexport const cancelIdleCallback: CancelIdleCallback =\n  typeof window !== 'undefined'\n    ? (window as any).cancelIdleCallback ||\n    function(idleId: IdleId): void {\n      console.warn('Fake cancelIdleCallback used');\n      clearTimeout(idleId);\n    }\n    : () => {\n    };\n\nexport const requestIdleCallback: RequestIdleCallback =\n  typeof window !== 'undefined'\n    ? (window as any).requestIdleCallback ||\n    function(cb: Function) {\n      console.warn('Fake requestIdleCallback used');\n      const start = Date.now();\n      return setTimeout(function() {\n        cb({\n          didTimeout: false,\n          timeRemaining: function() {\n            return Math.max(0, 50 - (Date.now() - start));\n          }\n        });\n      }, 1);\n    }\n    : () => {\n    };\n","import { Observable } from 'rxjs';\n\nexport const intervalTick = () =>\n  new Observable<number>((subscriber) => {\n    const id = (window as any).__zone_symbol__setInterval(() => {\n      subscriber.next(0);\n      subscriber.complete();\n    });\n\n    return () => {\n      (window as any).__zone_symbol__clearInterval(id);\n    };\n  });\n","export * from './unpatch-events.experimental.directive';\nexport * from './unpatch-events.experimental.module';\n","export * from './viewport-prio.experimental.directive';\nexport * from './viewport-prio.module';\n","import { NgModule } from '@angular/core';\nimport { UnpatchEventsDirective } from './unpatch-events.experimental.directive';\n\nconst DECLARATIONS = [UnpatchEventsDirective];\n\n@NgModule({\n  declarations: DECLARATIONS,\n  exports: DECLARATIONS\n})\nexport class UnpatchEventsModule {\n}\n","import { RenderStrategy, RenderStrategyFactoryConfig } from '../../core/render-aware/interfaces';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @description\n *\n * Noop Strategy\n *\n * The no-operation strategy does nothing.\n * It can be a useful tool for performance improvements as well as debugging\n * The [`[viewport-prio]`](https://github.com/rx-angular/rx-angular/blob/ef99804c1b07aeb96763cacca6afad7bbdab03b1/libs/template/src/lib/experimental/viewport-prio/viewport-prio.directive.ts) directive use it to limit renderings to only visible components:\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing    | Scheduling |\n * | --------- | --------------| ----------------- | ------------- | ---------- |\n * | `noop`    | ✔             | - `noop`          | ❌             | ❌         |\n *\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\n * @return {RenderStrategy} - The calculated strategy\n *\n */\nexport function createNoopStrategy(config: RenderStrategyFactoryConfig): RenderStrategy {\n  return {\n    name: 'noop',\n    detectChanges: () => {},\n    rxScheduleCD: (o) => o.pipe(filter(v => false)),\n    scheduleCD: () => new AbortController()\n  };\n}\n","import { AfterViewInit, Directive, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { zonePatchedEvents } from './unpatch-event-list.experimental';\nimport { getZoneUnPatchedApi } from '../../../core/utils';\n\n/**\n *\n * @description\n *\n * This function takes an elem and event and re-applies the listeners from the passed event to the\n * passed element with the zone un-patched version of it.\n *\n * @param elem {HTMLElement} - The elem to re-apply the listeners to.\n * @param event {string} - The name of the event from which to re-apply the listeners.\n *\n * @returns void\n */\nexport function unpatchEventListener(elem: HTMLElement, event: string): void {\n  const eventListeners = (elem as any).eventListeners(event);\n  // Return if no event listeners are present\n  if (!eventListeners) {\n    return;\n  }\n\n  const addEventListener = getZoneUnPatchedApi('addEventListener', elem).bind(\n    elem\n  );\n  eventListeners.forEach((listener) => {\n    // Remove and reapply listeners with patched API\n    elem.removeEventListener(event, listener);\n    // Reapply listeners with un-patched API\n    addEventListener(event, listener);\n  });\n}\n\n/**\n * @Directive UnpatchEventsDirective\n *\n * @description\n *\n * The `unpatch` directive helps in partially migrating to zone-less apps as well as getting rid\n * of unnecessary renderings through zones `addEventListener` patches.\n * It can be used on any element you apply event bindings.\n *\n * The current way of binding events to the DOM is to use output bindings:\n *  ```html\n * <button (click)=\"doStuff($event)\">click me</button>\n * ```\n *\n * The problem is that every event registered over `()` syntax, e.g. `(click)`\n * marks the component and all its ancestors as dirty and re-renders the whole component tree.\n * This is because zone.js patches the native browser API and whenever one of the patched APIs is used it re-renders.\n *\n * So even if your button is not related to a change that needs a re-render the app will re-render completely.\n * This leads to bad performance. This is especially helpful if you work with frequently fired events like 'mousemove'\n *\n * `unpatch` directive solves that problem.\n *\n * Included Features:\n *  - by default un-patch all registered listeners of the host it is applied on\n *  - un-patch only a specified set of registered event listeners\n *  - works zone independent (it directly checks the widow for patched APIs and un-patches them without the use of `runOutsideZone` which brings more performance)\n *  - Not interfering with any logic executed by the registered callback\n *\n * @usageNotes\n *\n * The `unpatch` directive can be used like shown here:\n * ```html\n * <button [unoatch] (click)=\"triggerSomeMethod($event)\">click me</button>\n * <button [unoatch]=\"['mousemove']\" (mousemove)=\"doStuff2($event)\" (click)=\"doStuff($event)\">click me</button>\n * ```\n *\n * @publicApi\n */\n// tslint:disable-next-line:directive-selector\n@Directive({ selector: '[unpatch]' })\nexport class UnpatchEventsDirective implements AfterViewInit, OnDestroy {\n  subscription = new Subscription();\n  events$ = new BehaviorSubject<string[]>(zonePatchedEvents);\n\n  /**\n   * @description\n   * List of events that the element should be unpatched from. When input is empty or undefined,\n   * the element is unpatched from all zone-patched events.\n   *\n   * Full list of zone-patched browser events can be found in\n   * [this document](https://github.com/angular/angular/blob/master/packages/zone.js/STANDARD-APIS.md#browser).\n   *\n   */\n  @Input('unpatch')\n  set events(events: string[]) {\n    if (events && events.length > 0) {\n      this.events$.next(events);\n    } else {\n      this.events$.next(zonePatchedEvents);\n    }\n  }\n\n  reapplyEventListenersZoneUnPatched(events) {\n    events.forEach((ev) => {\n      unpatchEventListener(this.el.nativeElement, ev);\n    });\n  }\n\n  constructor(private el: ElementRef) {\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.subscription = this.events$\n      .pipe(\n        tap((eventList) => this.reapplyEventListenersZoneUnPatched(eventList))\n      )\n      .subscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LetDirective } from './let.directive';\n\nconst EXPORTED_DECLARATIONS = [LetDirective];\n\n@NgModule({\n  declarations: EXPORTED_DECLARATIONS,\n  exports: [EXPORTED_DECLARATIONS]\n})\nexport class LetModule {\n}\n","import { Directive, ElementRef, OnInit, Optional } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, map, mergeAll, tap, withLatestFrom } from 'rxjs/operators';\nimport { getZoneUnPatchedApi } from '../../core';\nimport { LetDirective } from '../../let';\n\n/**\n *\n * @description\n *\n * This function takes an elem and event and re-applies the listeners from the passed event to the\n * passed element with the zone un-patched version of it.\n *\n * @param elem {HTMLElement} - The elem to re-apply the listeners to.\n * @param event {string} - The name of the event from which to re-apply the listeners.\n *\n * @returns void\n */\nfunction unpatchEventListener(elem: HTMLElement, event: string): void {\n  const eventListeners = (elem as any).eventListeners(event);\n  // Return if no event listeners are present\n  if (!eventListeners) {\n    return;\n  }\n\n  const addEventListener = getZoneUnPatchedApi('addEventListener', elem).bind(\n    elem\n  );\n  eventListeners.forEach((listener) => {\n    // Remove and reapply listeners with patched API\n    elem.removeEventListener(event, listener);\n    // Reapply listeners with un-patched API\n    addEventListener(event, listener);\n  });\n}\n\nfunction intersectionObserver(\n  options?: object\n): {\n  observe: (target: Element) => void;\n  unobserve: (target: Element) => void;\n  entries$: Observable<any>;\n} {\n  const subject = new Subject();\n  const observer = observerSupported()\n    ? new IntersectionObserver((entries) => {\n      entries.forEach((entry) => subject.next(entry));\n    }, options)\n    : null;\n\n  const entries$ = new Observable((subscriber) => {\n    subject.subscribe(subscriber);\n    return () => {\n      if (observer) {\n        observer.disconnect();\n      }\n    };\n  });\n\n  return {\n    entries$,\n    observe: observer.observe,\n    unobserve: observer.unobserve\n  };\n}\n\nconst observerSupported = () =>\n  typeof window !== 'undefined'\n    ? !!(window as any).IntersectionObserver\n    : false;\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[viewport-prio]'\n})\nexport class ViewportPrioDirective implements OnInit {\n  entriesSubject = new Subject<IntersectionObserverEntry[]>();\n  entries$: Observable<IntersectionObserverEntry> = this.entriesSubject.pipe(\n    mergeAll()\n  );\n\n  _viewportPrio = 'noop';\n  /* @Input('viewport-prio')\n  set viewportPrio(prio) {\n    if (prio) {\n      this._viewportPrio = prio || 'noop';\n    }\n  }*/\n\n  private observer: IntersectionObserver | null = observerSupported()\n    ? new IntersectionObserver((entries) => this.entriesSubject.next(entries), {\n      threshold: 0\n    })\n    : null;\n\n  visibilityEvents$ = this.entries$.pipe(\n    map((entry) => {\n      if (entry.intersectionRatio > 0) {\n        return 'visible';\n      } else {\n        return 'invisible';\n      }\n    })\n  );\n\n  constructor(\n    private readonly el: ElementRef,\n    @Optional() private letDirective: LetDirective<any>\n  ) {\n  }\n\n  ngOnInit() {\n    const letStrategyName$ = this.letDirective.renderAware.activeStrategy$.pipe(\n      map((s) => s.name),\n      filter((name) => name !== this._viewportPrio)\n    );\n\n    this.observer.observe(this.el.nativeElement);\n\n    this.visibilityEvents$\n      .pipe(\n        withLatestFrom(letStrategyName$),\n        map(([visibility, strategyName]) =>\n          visibility === 'visible' ? strategyName : this._viewportPrio\n        ),\n        tap((strategyName) => {\n          this.letDirective.strategy = strategyName;\n          // render actual state on viewport enter\n          // @TODO this doesnt catch unsubscribe (cant be cancelled)\n          this.letDirective.strategies[strategyName].scheduleCD();\n        })\n      )\n      .subscribe();\n  }\n}\n","import { Observable } from 'rxjs';\nimport { getZoneUnPatchedApi } from '../../../core';\n\nexport const animationFrameTick = () =>\n  new Observable<number>((subscriber) => {\n    const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\n      subscriber.next(0);\n      subscriber.complete();\n    });\n\n    return () => {\n      getZoneUnPatchedApi('cancelAnimationFrame')(id);\n    };\n  });\n","import {\n  MonoTypeOperatorFunction,\n  Observable,\n  Observer,\n  SubscribableOrPromise,\n  Subscriber,\n  Subscription,\n  Unsubscribable\n} from 'rxjs';\nimport { coalescingManager } from '../../../core/utils/coalescing-manager';\n\n/**\n * @description\n * Limits the number of synchronous emitted a value from the source Observable to\n * one emitted value per\n *   [`AnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame), then repeats\n *   this process for every tick of the browsers event loop.\n *\n * The coalesce operator is based on the [throttle](https://rxjs-dev.firebaseapp.com/api/operators/throttle) operator.\n * In addition to that is provides emitted values for the trailing end only, as well as maintaining a context to scope\n *   coalescing.\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector - A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * It defaults to `requestAnimationFrame` as durationSelector.\n * @param {Object} config - A configuration object to define `leading` and `trailing` behavior and the context object.\n * Defaults to `{ leading: false, trailing: true }`. The default scoping is per subscriber.\n * @return {Observable<T>} An Observable that performs the coalesce operation to\n * limit the rate of emissions from the source.\n *\n * @usageNotes\n * Emit clicks at a rate of at most one click per second\n * ```typescript\n * import { fromEvent, animationFrames } from 'rxjs';\n * import { coalesce } from 'ngRx/component';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(coalesce(ev => animationFrames));\n * result.subscribe(x => console.log(x));\n * ```\n */\nexport function coalesceWith<T>(\n  durationSelector: Observable<any>,\n  scope?: object\n): MonoTypeOperatorFunction<T> {\n  const _scope = scope || {};\n  return (source) => {\n    const o$ = new Observable<T>((observer) => {\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe(createInnerObserver(observer, rootSubscription))\n      );\n      return rootSubscription;\n    });\n\n    return o$;\n\n    function createInnerObserver(\n      outerObserver: Subscriber<T>,\n      rootSubscription: Subscription\n    ): Observer<T> {\n      let actionSubscription: Unsubscribable;\n      let latestValue: T | undefined;\n\n      const tryEmitLatestValue = () => {\n        coalescingManager.remove(_scope);\n        if (!coalescingManager.isCoalescing(_scope)) {\n          outerObserver.next(latestValue);\n        }\n      };\n      return {\n        complete: () => {\n          if (actionSubscription) {\n            tryEmitLatestValue();\n          }\n          outerObserver.complete();\n        },\n        error: (error) => outerObserver.error(error),\n        next: (value) => {\n          latestValue = value;\n          if (!actionSubscription) {\n            coalescingManager.add(_scope);\n            actionSubscription = durationSelector.subscribe({\n              next: () => {\n                tryEmitLatestValue();\n                actionSubscription = undefined;\n              },\n              complete: () => {\n                if (actionSubscription) {\n                  tryEmitLatestValue();\n                  actionSubscription = undefined;\n                }\n              }\n            });\n            rootSubscription.add(actionSubscription);\n          }\n        }\n      };\n    }\n  };\n}\n","import { getGlobalThis } from '../../../core/utils/get-global-this';\n\n/**\n * envRunsIvy\n *\n * @description\n * Determines the used view engine of an Angular project is Ivy or not.\n * The check is done based on following table:\n * | render       | ViewEngine | ViewEngine | Ivy         | Ivy         |\n * | ------------ | ---------- | ---------- | ----------- | ----------- |\n * | **mode**     | prod       | dev        | prod        | dev         |\n * | **ng**       | present    | present    | `undefined` | present     |\n * | **ng.probe** | present    | present    | `undefined` | `undefined` |\n *\n *  So for Ivy we need to make sure that ng is undefined or,\n *  in case of dev environment, ng.probe is undefined.\n *\n * @return {boolean} - true if the used view engine is Ivy.\n *\n */\nexport function isViewEngineIvy(): boolean {\n  const ng: any = getGlobalThis().ng;\n\n  // Is the global ng object is unavailable?\n  // ng === undefined in Ivy production mode\n  // View Engine has the ng object both in development mode and production mode.\n  return (\n    ng === undefined ||\n    // in case we are in dev mode in ivy\n    // `probe` property is available on ng object we use View Engine.\n    ng.probe === undefined\n  );\n}\n","export * from './coalesceWith';\n","type KeyOf<O> = keyof O & string & symbol & number;\n\n/*\n * createPropertiesWeakMap\n *\n * @param getDefaults: (o: O) => P\n * Example:\n *\n * export interface Properties {\n *   isCoalescing: boolean;\n * }\n *\n * const obj: object = {\n *   foo: 'bar',\n *   isCoalescing: 'weakMap version'\n * };\n *\n * const getDefaults = (ctx: object): Properties => ({isCoalescing: false});\n * const propsMap = createPropertiesWeakMap<object, Properties>(getDefaults);\n *\n * console.log('obj before:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props before:', propsMap.getProps(obj));\n * // {isCoalescing: \"weakMap version\"}\n *\n * propsMap.setProps(obj, {isCoalescing: true});\n * console.log('obj after:', obj);\n * // {foo: \"bar\", isCoalescing: \"weakMap version\"}\n * console.log('props after:', propsMap.getProps(obj));\n * // {isCoalescing: \"true\"}\n * */\nexport function createPropertiesWeakMap<O extends object, P extends object>(\n  getDefaults: (o: O) => P\n) {\n  type K = KeyOf<P>;\n  const propertyMap = new WeakMap<O, P>();\n\n  return {\n    getProps: getProperties,\n    setProps: setProperties\n  };\n\n  function getProperties(ctx: O): P {\n    const defaults = getDefaults(ctx);\n    const propertiesPresent: P | undefined = propertyMap.get(ctx);\n    let properties: P;\n\n    if (propertiesPresent !== undefined) {\n      properties = propertiesPresent;\n    } else {\n      properties = {} as P;\n\n      (Object.entries(defaults) as [K, P[K]][]).forEach(\n        ([prop, value]): void => {\n          properties[prop] = hasKey(ctx, prop) ? ctx[prop] : value;\n        }\n      );\n\n      propertyMap.set(ctx, properties);\n    }\n    return properties;\n  }\n\n  function setProperties(ctx: O, props: Partial<P>): P {\n    const properties: P = getProperties(ctx);\n    (Object.entries(props) as [K, P[K]][]).forEach(([prop, value]) => {\n      properties[prop] = value;\n    });\n    propertyMap.set(ctx, properties);\n    return properties;\n  }\n\n  function hasKey(ctx: O, property: K): ctx is K {\n    return ctx[property] != null;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { getUnpatchedResolvedPromise } from '../../../core';\n\n// @NOTICE replace logic with 7v handling of promises in RxJS\n\nexport const promiseTick = () =>\n  new Observable<number>((subscriber) => {\n    let cancelled = false;\n    getUnpatchedResolvedPromise()\n      .then(() => {\n        if (!cancelled) {\n          subscriber.next(0);\n          subscriber.complete();\n        }\n      })\n      .catch((e) => {\n        subscriber.error(e);\n      });\n    return () => {\n      cancelled = true;\n      subscriber.complete();\n    };\n  });\n","import { fromEvent, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n *\n * convenience method to prevent duplicated code. used in strategies after static coalescing\n *\n * @internal\n */\nexport function afterCoalesceAndSchedule<T>(work: () => void, afterCD?: () => T) {\n  work();\n  if (afterCD) {\n    afterCD();\n  }\n}\n\n/**\n *\n * convenience method to prevent duplicated code.\n * helper for strategies where we have no direct control over the rendering and thus no information about when\n * rendering was finished. used in native & global strategy\n *\n * @internal\n */\nexport function afterScheduleCD<R>(\n  tick: () => Observable<number>\n) {\n  let activeAbortController: AbortController;\n  return function(afterCD?: () => R) {\n    if (activeAbortController) {\n      activeAbortController.abort();\n    }\n    activeAbortController = new AbortController();\n    if (afterCD) {\n      tick()\n        .pipe(takeUntil(fromEvent(activeAbortController.signal, 'abort')))\n        .subscribe(() => {\n          afterCD();\n        });\n    }\n    return activeAbortController;\n  };\n}\n","export enum SchedulingName {\n  animationFrame = 'animationFrame',\n  Promise = 'Promise',\n  idleCallback = 'idleCallback',\n  userBlocking = 'userBlocking',\n  userVisible = 'userVisible',\n  background = 'background',\n  setInterval = 'setInterval',\n}\n\n\nexport enum SchedulingPriority {\n  sync,\n  animationFrame,\n  Promise,\n  setTimeout,\n  setInterval,\n  postMessage,\n  idleCallback,\n  userBlocking,\n  userVisible,\n  background\n}\n\n","import { NgModule } from '@angular/core';\nimport { ViewportPrioDirective } from './viewport-prio.experimental.directive';\n\nconst DECLARATIONS = [ViewportPrioDirective];\n\n@NgModule({\n  declarations: DECLARATIONS,\n  exports: DECLARATIONS\n})\nexport class ViewportPrioModule {\n}\n","export * from './render-aware';\nexport * from './utils';\n","export * from './operators';\nexport * from './scheduling';\n","export * from './rxjs';\nexport * from './static';\nexport * from './strategies';\n","export * from './push.pipe';\nexport * from './push.module';\n","import { from } from 'rxjs';\nimport { staticCoalesce } from './static-coalesce';\nimport { staticSchedule } from './static-schedule';\nimport { SchedulingPriority } from '../rxjs/scheduling';\nimport { getUnpatchedResolvedPromise } from '../../core/utils';\n\nexport function coalesceAndSchedule(\n  work: () => void,\n  priority: false | SchedulingPriority,\n  scope: object = {},\n  abC: AbortController = new AbortController()\n): AbortController {\n  const durationSelector = from(getUnpatchedResolvedPromise());\n  const scheduledWork = () => staticSchedule(work, priority, abC);\n\n  const coalesceAbC = staticCoalesce(\n    scheduledWork,\n    durationSelector,\n    scope,\n    abC\n  );\n\n  const abortHandler = function() {\n    coalesceAbC.abort();\n    abC.signal.removeEventListener('abort', abortHandler, false);\n  };\n  abC.signal.addEventListener('abort', abortHandler, false);\n\n  return abC;\n}\n","import { Observable } from 'rxjs';\n\nexport const timeoutTick = () =>\n  new Observable<number>((subscriber) => {\n    const id = (window as any).__zone_symbol__setTimeout(() => {\n      subscriber.next(0);\n      subscriber.complete();\n    });\n\n    return () => {\n      (window as any).__zone_symbol__clearTimeout(id);\n    };\n  });\n","import { coalesceAndSchedule } from '../static';\nimport { SchedulingPriority } from '../rxjs/scheduling/interfaces';\nimport { priorityTickMap } from '../rxjs/scheduling/priority-tick-map';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { RenderStrategy, RenderStrategyFactoryConfig } from '../../core/render-aware';\nimport { coalesceWith } from '../rxjs/operators/coalesceWith';\nimport { promiseTick } from '../rxjs/scheduling/promiseTick';\nimport { afterCoalesceAndSchedule } from '../util';\n\nconst promiseDurationSelector = promiseTick();\n\n/**\n * Detach Strategies\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing         | Scheduling                 |\n * | --------- | --------------| ----------------- | ------------------ | -------------------------- |\n * | `detach`  | ✔             | ⭭ `detectChanges` | ✔ ComponentContext | `requestAnimationFrame`   |\n *\n */\n\nexport function getDetachStrategies<T>(\n  config: RenderStrategyFactoryConfig\n): { [strategy: string]: RenderStrategy } {\n  return {\n    detach: createDetachStrategy(config)\n  };\n}\n\n/**\n * Detach Strategy\n *\n * This strategy behaves the same as the local strategy.\n * The detach strategy detaches the component from Angulars change detection.\n * With every new value it re-attaches the component/embedded view to the change detection,\n * renders the new value and detaches again.\n *\n * If a component is detached the input bindings will still receive values.\n * Also the internal logic will work as expected including the use of `ViewChild`.\n * Only the template will not be updated.\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing         | Scheduling                 |\n * | --------- | --------------| ----------------- | ------------------ | -------------------------- |\n * | `detach`  | ✔             | ⭭ `detectChanges` | ✔ ComponentContext | `requestAnimationFrame`   |\n *\n * @param config - The values this strategy needs to get calculated.\n * @return - The calculated strategy\n *\n */\nexport function createDetachStrategy(\n  config: RenderStrategyFactoryConfig\n): RenderStrategy {\n  const component = (config.cdRef as any).context;\n  const priority = SchedulingPriority.animationFrame;\n  const tick = priorityTickMap[priority];\n\n  const renderMethod = () => {\n    config.cdRef.reattach();\n    config.cdRef.detectChanges();\n    config.cdRef.detach();\n  };\n  const behavior = (o) => o.pipe(\n    coalesceWith(promiseDurationSelector, component),\n    // dispose previous render attempts (tick schedules it into the future)\n    switchMap((v) => tick.pipe(map(() => v))),\n    tap(renderMethod)\n  );\n  const scheduleCD = <R>(afterCD?: () => R) =>\n    coalesceAndSchedule(() => {\n      afterCoalesceAndSchedule(renderMethod, afterCD);\n    }, priority, component);\n\n  return {\n    name: 'detach',\n    detectChanges: renderMethod,\n    rxScheduleCD: behavior,\n    scheduleCD\n  };\n}\n","export enum PostTaskSchedulerPriority {\n  background = 'background',\n  userBlocking = 'user-blocking',\n  userVisible = 'user-visible',\n}\n\nexport interface PostTaskScheduler {\n  postTask<T>(cb: () => void, options: SchedulerPostTaskOptions): Promise<T>;\n}\n\nexport interface SchedulerPostTaskOptions {\n  priority: PostTaskSchedulerPriority | string | null;\n  delay?: number;\n  signal?: any;\n}\n\nexport const postTaskScheduler: PostTaskScheduler =\n  typeof window !== 'undefined'\n    ? (window as any).scheduler || {\n    postTask<T>(options: SchedulerPostTaskOptions): Promise<T> {\n      const start = Date.now();\n      return new Promise((resolve) => {\n        setTimeout(function() {\n          console.error(\n            'postTask not implemented. Use setTimeout as fallback'\n          );\n          resolve();\n        }, 1);\n      });\n    }\n  }\n    : () => {\n    };\n","import { NgModule } from '@angular/core';\n\nimport { LetModule } from './let';\nimport { PushModule } from './push';\nimport { UnpatchEventsModule } from './experimental/unpatch/events';\nimport { ViewportPrioModule } from './experimental/viewport-prio';\n\n@NgModule({\n  exports: [LetModule, PushModule, UnpatchEventsModule, ViewportPrioModule]\n})\nexport class TemplateModule {\n}\n","export const zonePatchedEvents = [\n  'scroll',\n  'mousedown',\n  'mouseenter',\n  'mouseleave',\n  'mousemove',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n  'load',\n  'pointerup',\n  'change',\n  'blur',\n  'focus',\n  'click',\n  'contextmenu',\n  'drag',\n  'dragend',\n  'dragenter',\n  'dragleave',\n  'dragover',\n  'dragstart',\n  'drop',\n  'input'\n];\n","/** A shared promise instance to cause a delay of one microtask */\nimport { getZoneUnPatchedApi } from './zone-checks';\n\nlet resolvedPromise: Promise<void> | null = null;\n\nexport function getUnpatchedResolvedPromise(): Promise<void> {\n  resolvedPromise = resolvedPromise || getZoneUnPatchedApi<PromiseConstructor>('Promise').resolve();\n  return resolvedPromise;\n}\n","import {\n  idleCallbackTick,\n  PostTaskSchedulerPriority,\n  postTaskTick,\n  timeoutTick\n} from '../../../experimental/render-strategies/rxjs/scheduling';\nimport { animationFrameTick } from './animationFrameTick';\nimport { promiseTick } from './promiseTick';\nimport { SchedulingPriority } from './interfaces';\n\nexport const priorityTickMap = {\n  [SchedulingPriority.animationFrame]: animationFrameTick(),\n  [SchedulingPriority.Promise]: promiseTick(),\n  // @deprecated This is still experimental\n  [SchedulingPriority.setInterval]: timeoutTick(),\n  // @deprecated This is still experimental\n  [SchedulingPriority.idleCallback]: idleCallbackTick(),\n  // @deprecated This is still experimental\n  [SchedulingPriority.userBlocking]: postTaskTick({\n    priority: PostTaskSchedulerPriority.userBlocking\n  }),\n  // @deprecated This is still experimental\n  [SchedulingPriority.userVisible]: postTaskTick({\n    priority: PostTaskSchedulerPriority.userVisible\n  }),\n  // @deprecated This is still experimental\n  [SchedulingPriority.background]: postTaskTick({ priority: PostTaskSchedulerPriority.background })\n};\n","import { NgModule } from '@angular/core';\nimport { PushPipe } from './push.pipe';\n\nconst DECLARATIONS = [PushPipe];\n\n/**\n * @description\n * This module exports the PushPipe\n *\n * @example\n *\n * ```typescript\n * @NgModule({\n *  imports: [PushModule],\n *  //...\n * })\n * export class AppModule {}\n * ```\n *\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  imports: [],\n  exports: DECLARATIONS\n})\nexport class PushModule {\n}\n","import { Observable } from 'rxjs';\nimport { cancelIdleCallback, requestIdleCallback } from './idleCallback.experimental';\n\nexport const idleCallbackTick = () =>\n  new Observable<number>((subscriber) => {\n    const id = requestIdleCallback(() => {\n      subscriber.next(0);\n      subscriber.complete();\n    });\n\n    return () => cancelIdleCallback(id);\n  });\n","import { createPropertiesWeakMap } from './properties-weakmap';\n\ninterface CoalescingContextProps {\n  numCoalescingSubscribers: number;\n}\n\ninterface CoalescingManager {\n  remove: (scope: object) => void,\n  add: (scope: object) => void,\n  isCoalescing: (scope: object) => boolean,\n}\n\nexport const coalescingManager = createCoalesceManager();\n\nconst coalescingContextPropertiesMap = createPropertiesWeakMap<object,\n  CoalescingContextProps>((ctx) => ({\n  numCoalescingSubscribers: 0\n}));\n\n/**\n * @describe createCoalesceManager\n *\n * returns a\n * Maintains a weak map of component references ans flags\n * them if the coalescing process is already started for them.\n *\n * Used in render aware internally.\n */\nfunction createCoalesceManager(): CoalescingManager {\n  return {\n    remove: removeWork,\n    add: addWork,\n    isCoalescing\n  };\n\n  // Increments the number of subscriptions in a scope e.g. a class instance\n  function removeWork(scope: object): void {\n    const numCoalescingSubscribers =\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers -\n      1;\n    coalescingContextPropertiesMap.setProps(scope, {\n      numCoalescingSubscribers\n    });\n  }\n\n  // Decrements the number of subscriptions in a scope e.g. a class instance\n  function addWork(scope: object): void {\n    const numCoalescingSubscribers =\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers +\n      1;\n    coalescingContextPropertiesMap.setProps(scope, {\n      numCoalescingSubscribers\n    });\n  }\n\n  // Checks if anybody else is already coalescing atm\n  function isCoalescing(scope: object): boolean {\n    return (\n      coalescingContextPropertiesMap.getProps(scope).numCoalescingSubscribers >\n      0\n    );\n  }\n}\n","import {\n  ConnectableObservable,\n  Observable,\n  concat,\n  NEVER,\n  of,\n  OperatorFunction,\n  ReplaySubject,\n  Subscribable,\n  Subscription\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  publish,\n  shareReplay,\n  startWith,\n  switchMap,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { RxNotification, RxTemplateObserver } from '../model';\nimport { rxMaterialize } from '../utils/rx-materialize';\nimport { RenderStrategy, StrategySelection } from './interfaces';\n\nexport interface RenderAware<U> extends Subscribable<U> {\n  nextPotentialObservable: (value: any) => void;\n  nextStrategy: (config: string | Observable<string>) => void;\n  activeStrategy$: Observable<RenderStrategy>;\n  rendered$: Observable<RxNotification<U>>;\n}\n\n/**\n * RenderAware\n *\n * @description\n * This function returns an object that holds all the shared logic for the push pipe and the let directive\n * responsible for change detection\n * If you extend this class you need to implement how the update of the rendered value happens.\n * Also custom behaviour is something you need to implement in the extending class\n */\nexport function createRenderAware<U>(cfg: {\n  strategies: StrategySelection;\n  templateObserver: RxTemplateObserver<U>;\n}): RenderAware<U | undefined | null> {\n  const strategyName$ = new ReplaySubject<string | Observable<string>>(1);\n  let currentStrategy: RenderStrategy;\n  const strategy$: Observable<RenderStrategy> = strategyName$.pipe(\n    distinctUntilChanged(),\n    switchMap((stringOrObservable) =>\n      typeof stringOrObservable === 'string'\n      ? of(stringOrObservable)\n      : stringOrObservable\n    ),\n    map((strategy: string): RenderStrategy => {\n        const s = cfg.strategies[strategy];\n        if (!!s) {\n          return s;\n        }\n        throw new Error(`Strategy ${ strategy } does not exist.`);\n      }\n    ),\n    tap((s) => (currentStrategy = s)),\n    // do not repeat the steps before for each subscriber\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  const observablesFromTemplate$ = new ReplaySubject<Observable<U>>(1);\n  const valuesFromTemplate$ = observablesFromTemplate$.pipe(\n    distinctUntilChanged()\n  );\n  let firstTemplateObservableChange = true;\n\n  const renderingEffect$ = valuesFromTemplate$.pipe(\n    // handle null | undefined assignment and new Observable reset\n    map((observable$) => {\n      if (observable$ === null) {\n        return of(null);\n      }\n      if (!firstTemplateObservableChange) {\n        cfg.templateObserver.suspense();\n        if (observable$ === undefined) {\n          return of(undefined);\n        }\n      }\n      firstTemplateObservableChange = false;\n      return observable$;\n    }),\n    // forward only observable values\n    filter((o$) => o$ !== undefined),\n    distinctUntilChanged(),\n    switchMap((o$) =>\n      o$\n        // Added behavior will get applied to the observable in `renderWithLatestStrategy`\n        .pipe(\n          // Forward only distinct values\n          distinctUntilChanged(),\n          // Update completion, error and next\n          tap(cfg.templateObserver),\n          renderWithLatestStrategy(strategy$)\n        )\n    ),\n    publish()\n  );\n\n  return {\n    nextPotentialObservable(value: any): void {\n      observablesFromTemplate$.next(value);\n    },\n    nextStrategy(nextConfig: string | Observable<string>): void {\n      strategyName$.next(nextConfig);\n    },\n    rendered$: renderingEffect$,\n    activeStrategy$: strategy$,\n    subscribe(): Subscription {\n      return new Subscription().add((renderingEffect$ as ConnectableObservable<U>).connect());\n    }\n  };\n}\n\n\nfunction renderWithLatestStrategy<T>(\n  strategyChanges$: Observable<RenderStrategy>\n): OperatorFunction<T, RxNotification<T>> {\n  const suspenseNotification: RxNotification<T> = {\n    kind: 'rxSuspense',\n    value: undefined,\n    hasValue: false,\n    error: undefined,\n  };\n  return (o$) => {\n    return o$.pipe(\n      rxMaterialize(),\n      withLatestFrom(strategyChanges$),\n      // always use latest strategy on value change\n      switchMap(([renderValue, strategy]) =>\n        concat(of(renderValue), NEVER).pipe(strategy.rxScheduleCD)\n      ),\n      startWith(suspenseNotification),\n    );\n  };\n}\n","export * from './get-global-this';\nexport * from './properties-weakmap';\nexport * from './unpatched-resolved-promise';\nexport * from './zone-checks';\nexport * from './coalescing-manager';\n","import { OperatorFunction } from 'rxjs';\nimport { map, materialize, tap } from 'rxjs/operators';\nimport { RxNotification, RxNotificationKind } from '../model';\n\nexport function rxMaterialize<T>(): OperatorFunction<T, RxNotification<T>> {\n  return o$ => o$.pipe(\n    materialize(),\n    tap(({ kind, error }) => {\n      if (kind === 'E') {\n        console.error(error);\n      }\n    }),\n    map(({ value, hasValue, error, kind }) => ({\n      value,\n      hasValue,\n      error,\n      kind: notificationKindToRxNotificationKind(kind)\n    })),\n  );\n}\nexport function notificationKindToRxNotificationKind(kind: 'N' | 'E' | 'C'): RxNotificationKind {\n  switch (kind) {\n    case 'C':\n      return 'rxComplete';\n    case 'E':\n      return 'rxError';\n    case 'N':\n    default:\n      return 'rxNext';\n  }\n}\n","import { ɵmarkDirty as markDirty } from '@angular/core';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { RenderStrategy, RenderStrategyFactoryConfig } from '../../core/render-aware';\nimport { animationFrameTick } from '../rxjs/scheduling';\nimport { afterScheduleCD } from '../util';\n\nexport function getGlobalStrategies(\n  config: RenderStrategyFactoryConfig\n): { [strategy: string]: RenderStrategy } {\n  return {\n    global: createGlobalStrategy(config)\n  };\n}\n\n/**\n *\n * @description\n *\n * Global Strategies\n *\n * This strategy leverages Angular's internal\n *   [`ɵmarkDirty`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/instructions/change_detection.ts#L36)\n *   render method. It acts identical to\n *   [`ChangeDetectorRef#markForCheck`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/view_ref.ts#L128)\n *   but works also zone-less.\n * `markDirty` in comparison to `markForCheck` also calls\n *   [`scheduleTick`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/instructions/shared.ts#L1863)\n *   which is the reason why it also works in zone-less environments.\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing      | Scheduling       |\n * | --------- | --------------| ----------------- | --------------- | ---------------- |\n * | `global`  | ✔             | ⮁ `ɵmarkDirty`   | ✔ `RootContext` |\n *   [`animationFrame`](https://github.com/angular/angular/blob/930eeaf177a4c277f437f42314605ff8dc56fc82/packages/core/src/render3/util/misc_utils.ts#L39)\n *     |\n *\n * @param config { RenderStrategyFactoryConfig } - The values this strategy needs to get calculated.\n * @return { RenderStrategy } - The calculated strategy\n *\n */\nexport function createGlobalStrategy(\n  config: RenderStrategyFactoryConfig\n): RenderStrategy {\n  const renderMethod = () => markDirty((config.cdRef as any).context);\n  const cdScheduler = afterScheduleCD(animationFrameTick);\n  return {\n    name: 'global',\n    detectChanges: () => renderMethod(),\n    rxScheduleCD: (o) => o.pipe(\n      tap(() => renderMethod()),\n      switchMap(v => animationFrameTick().pipe(map(() => v)))\n    ),\n    scheduleCD: <R>(afterCD?: () => R) => {\n      renderMethod();\n      return cdScheduler(afterCD);\n    }\n  };\n}\n","import { getGlobalThis } from './get-global-this';\n\n/**\n * getZoneUnPatchedApi\n *\n * @description\n *\n * This function returns the zone un-patched API for the a specific Browser API.\n * If no element is passed the window is used instead\n *\n * @param name {string} - The name of the API to check.\n * @param elem {any} - The elem to get un-patched API from.\n * @return {Function} - The zone un-patched API in question.\n *\n */\nexport function getZoneUnPatchedApi<T = Function>(name: string, elem?: object): T {\n  elem = elem || getGlobalThis();\n  return isApiZonePatched(name, elem) ? elem['__zone_symbol__' + name] : elem[name];\n}\n\n\n/**\n * envZonePatched\n *\n * @description\n *\n * This function checks the window object `zone.js` was instantiated.\n * If so, the `window` object maintains a property named `Zone`.\n *\n * Here how Angular checks it: https://github.com/angular/angular/blob/master/packages/core/src/zone/ng_zone.ts#L123\n *\n * @return {boolean} - true if `zone.js` patched global APIs.\n *\n */\nexport function isEnvZonePatched(): boolean {\n  return getGlobalThis().Zone !== undefined;\n}\n\n/**\n * apiZonePatched\n *\n * @description\n *\n * This function checks if a specific Browser API is patched by `zone.js`.\n *\n * @param name - The name of the API to check.\n * @param elem - The name of the API to check.\n * @return {boolean} - true if `zone.js` patched the API in question.\n *\n */\nexport function isApiZonePatched(name: string, elem: object): boolean {\n  // if symbol is present, zone patched the API\n  return elem['__zone_symbol__' + name] !== undefined;\n}\n\nconst zoneDetectionCache = new WeakMap<any, boolean>();\n\n/**\n * isNgZone\n *\n * @description\n *\n * This function takes an instance of a class which implements the NgZone interface and checks if\n * its `runOutsideAngular()` function calls `apply()` on the function passed as parameter. This\n * means the Angular application that instantiated this service assumes it runs in a ZoneLess\n * environment, and therefore it's change detection will not be triggered by zone related logic.\n *\n * However, keep in mind this does not mean `zone.js` is not present.\n * The environment could still run in ZoneFull mode even if Angular turned it off.\n * Consider the situation of a Angular element configured for ZoneLess\n * environments is used in an Angular application relining on the zone mechanism.\n *\n * @param instance {Class Instance} - The instance to check for constructor name of `NgZone`.\n * @return {boolean} - true if instance is of type `NgZone`.\n *\n */\nexport function isNgZone(instance: any): boolean {\n  const cachedValue = zoneDetectionCache.get(instance);\n\n  if (cachedValue !== undefined) {\n    return cachedValue;\n  }\n\n  let calledApply = false;\n\n  function fn() {\n  }\n\n  fn.apply = () => (calledApply = true);\n\n  instance.runOutsideAngular(fn);\n  zoneDetectionCache.set(instance, calledApply);\n\n  return calledApply;\n}\n\n/**\n * isNoopNgZone\n *\n *@description\n *\n * This function takes any instance of a class and checks\n * if the constructor name is equal to `NoopNgZone`.\n *\n * For more detailed information read the description of [isNgZone](#isngzone).\n *\n * @param instance {Class Instance} - The instance to check for constructor name of `NoopNgZone`.\n * @return {boolean} - true if instance is of type `NoopNgZone`.\n *\n */\nexport function isNoopNgZone(instance: any): boolean {\n  return !isNgZone(instance);\n}\n\n","import { Observable } from 'rxjs';\nimport { postTaskScheduler, SchedulerPostTaskOptions } from './postTask.experimental';\n\nexport const postTaskTick = (options: SchedulerPostTaskOptions) =>\n  new Observable<number>((subscription) => {\n    postTaskScheduler\n      .postTask(() => {\n      }, options)\n      .then(() => {\n        subscription.next(0);\n        subscription.complete();\n      });\n\n    return () => {\n    };\n  });\n","import { RenderStrategy, RenderStrategyFactoryConfig } from '../../core/render-aware';\nimport { createNoopStrategy } from './noop.strategy';\nimport { createNativeStrategy } from './native.strategy';\nimport { getLocalStrategies } from './local.strategy';\nimport { getGlobalStrategies } from './global.strategy';\nimport { getDetachStrategies } from './detach-strategy';\n\nexport const DEFAULT_STRATEGY_NAME = 'local';\n\n/**\n * @description\n * This method returns the provided strategies as name:strategy pair\n *\n * Built-in Strategies:\n *\n * | Name      | Zone Agnostic | Render Method     | Coalescing         | Scheduling                 |\n * | --------- | --------------| ----------------- | ------------------ | -------------------------- |\n * | `local`   | ✔             | 🠗 `detectChanges` | ✔ ComponentContext | `requestAnimationFrame`   |\n * | `global`  | ✔             | ⮁ `ɵmarkDirty`    | ✔ RootContext     | `requestAnimationFrame`   |\n * | `detach`  | ✔             | ⭭ `detectChanges` | ✔ ComponentContext | `requestAnimationFrame`   |\n * | `noop`    | ✔             | - `noop`          | ❌                 | ❌                        |\n * | `native`  | ❌             | ⮁ `markForCheck` | ✔ RootContext     | `requestAnimationFrame`  |\n *\n * @param config\n */\nexport function getStrategies(\n  config: RenderStrategyFactoryConfig\n): { [strategy: string]: RenderStrategy } {\n  return {\n    ...getLocalStrategies(config),\n    ...getGlobalStrategies(config),\n    ...getDetachStrategies(config),\n    noop: createNoopStrategy(config),\n    native: createNativeStrategy(config)\n  };\n}\n","export * from './let.directive';\nexport * from './let.module';\n","export * from './static-schedule-and-coalesced';\nexport * from './static-coalesce';\nexport * from './static-schedule';\n"],"sourceRoot":"webpack:///"}