{"version":3,"sources":["./src/app/features/experiments/differ/shared/rx-for-differ.directive.ts","./src/app/features/experiments/differ/shared/rx-for-differ2.directive.ts","./src/app/features/experiments/differ/shared/rx-differ.ts","./src/app/features/experiments/differ/shared/from-for.ts","./src/app/features/experiments/differ/shared/index.ts","./src/app/features/experiments/differ/shared/shared.module.ts","./src/app/features/experiments/differ/shared/utils.ts"],"names":[],"mappings":"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","file":"default~rx-for-differ-rx-for-differ-module~rx-iterable-differ-rx-iterable-differ-module.js","sourcesContent":["import { ChangeDetectorRef, Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { Observable, ObservableInput, ReplaySubject, Subscription, Unsubscribable } from 'rxjs';\nimport { distinctUntilChanged, switchAll, switchMapTo, tap } from 'rxjs/operators';\nimport { Hooks } from '../../../../shared/debug-helper/hooks';\nimport { RxState } from '@rx-angular/state';\nimport { RxIterableDiffer, rxIterableDifferFactory } from './rx-differ';\nimport { constantPluck } from './utils';\n\nexport interface RxForDifferViewContext<T extends object, K = keyof T> {\n  $implicit?: T;\n}\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[rxForDiffer]',\n  providers: [RxState]\n})\nexport class RxForDifferDirective<U extends object> extends Hooks {\n  private subscription: Unsubscribable = new Subscription();\n  private rxDiffer: RxIterableDiffer<U>;\n\n  observables$ = new ReplaySubject(1);\n  embeddedViews: Map<U, { view: EmbeddedViewRef<any>, item: any }> = new Map();\n\n  array$: Observable<U[]> = this.observables$\n    .pipe(\n      distinctUntilChanged(),\n      switchAll()\n    );\n\n  @Input()\n  set rxForDiffer(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.observables$.next(potentialObservable);\n  }\n\n  @Input()\n  set rxForDifferTrackBy(trackByFnOrKey: string | ((i) => any)) {\n    console.log('rxForDifferTrackBy', trackByFnOrKey);\n    const trackBy = typeof trackByFnOrKey !== 'function' ? constantPluck(trackByFnOrKey) : trackByFnOrKey;\n    this.state.set({ trackBy });\n  }\n\n  @Input()\n  rxForDifferDistinctBy(distinctByFnOrKey: string | ((i) => any)) {\n    console.log('rxForDifferDistinctBy', distinctByFnOrKey);\n    const distinctBy = typeof distinctByFnOrKey !== 'function' ? constantPluck(distinctByFnOrKey) : distinctByFnOrKey;\n    this.state.set({ distinctBy });\n  }\n\n  constructor(\n    private state: RxState<{ trackBy: ((i) => any), distinctBy: ((i) => any) }>,\n    private cdRef: ChangeDetectorRef,\n    private readonly templateRef: TemplateRef<RxForDifferViewContext<any>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    super();\n    this.state.set({ distinctBy: i => i, trackBy: i => i });\n    this.state.hold(this.afterViewInit$.pipe(\n      tap(() => {\n        this.setupDiffer();\n        this.state.hold(this.rxDiffer.enter$, i => this.onEnter(i));\n        this.state.hold(this.rxDiffer.update$, i => this.onUpdate(i));\n        this.state.hold(this.rxDiffer.exit$, i => this.onExit(i));\n      }),\n      switchMapTo(this.array$),\n      tap(v => this.rxDiffer.next(v))\n      )\n    );\n    this.state.hold(this.onDestroy$, () => this.tearDownDirective());\n  }\n\n  private setupDiffer() {\n    this.rxDiffer = rxIterableDifferFactory<U & object>({\n      trackBy: this.state.get('trackBy')\n    });\n    this.rxDiffer.connect();\n  }\n\n  private tearDownDirective() {\n    this.viewContainerRef.clear();\n    this.subscription.unsubscribe();\n  }\n\n  onEnter = (item: U): void => {\n    console.log('onEnter', item);\n    const key = this.state.get('trackBy')(item);\n    console.log('key', key, this.state.get('trackBy'));\n    let existingItem = this.embeddedViews.has(key) ? this.embeddedViews.get(key) : undefined;\n    if (!existingItem) {\n      const view = this.viewContainerRef\n        .createEmbeddedView(this.templateRef, { $implicit: item });\n      existingItem = { view, item };\n      this.embeddedViews.set(key, existingItem);\n      existingItem.view.detectChanges();\n    }\n  };\n\n  onUpdate = (item: U): void => {\n    const key = this.state.get('trackBy')(item);\n    const existingItem = this.embeddedViews.has(key) ? this.embeddedViews.get(key) : undefined;\n    console.log('onUpdate', existingItem , key);\n    if (existingItem) {\n      existingItem.view.context.$implicit = item;\n      existingItem.view.detectChanges();\n    }\n  };\n\n  onExit = (item: U): void => {\n    console.log('onExit', item);\n  };\n\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  IterableDiffer,\n  IterableDiffers,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { Observable, ObservableInput, ReplaySubject, Subscription, Unsubscribable } from 'rxjs';\nimport { distinctUntilChanged, map, mergeMap, shareReplay, switchAll, tap } from 'rxjs/operators';\nimport { Hooks } from '../../../../shared/debug-helper/hooks';\nimport { RxState } from '@rx-angular/state';\nimport { constantPluck } from './utils';\nimport { fromFor } from './from-for';\n\nexport interface RxForDifferViewContext<T extends object, K = keyof T> {\n  $implicit?: T;\n}\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[rxForDiffer2]',\n  providers: [RxState]\n})\nexport class RxForDiffer2Directive<U extends object> extends Hooks {\n  private subscription: Unsubscribable = new Subscription();\n  // private rxDiffer: RxIterableDiffer<U>;\n  private differ: IterableDiffer<U>;\n\n  observables$ = new ReplaySubject(1);\n  embeddedViews: Map<U, { view: EmbeddedViewRef<any>, item: any }> = new Map();\n\n  enter$: Observable<U>;\n  move$: Observable<U>;\n  identityChange$: Observable<U>;\n  exit$: Observable<U>;\n\n  array$: Observable<U[]> = this.observables$\n    .pipe(\n      distinctUntilChanged(),\n      switchAll()\n    );\n\n  @Input()\n  set rxForDiffer2(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.observables$.next(potentialObservable);\n  }\n\n  @Input()\n  set rxForDiffer2TrackBy(trackByFnOrKey: string | ((i) => any)) {\n    const trackBy = typeof trackByFnOrKey !== 'function' ? constantPluck(trackByFnOrKey) : trackByFnOrKey;\n    this.state.set({ trackBy });\n  }\n\n  @Input()\n  rxForDiffer2DistinctBy(distinctByFnOrKey: string | ((i) => any)) {\n    const distinctBy = typeof distinctByFnOrKey !== 'function' ? constantPluck(distinctByFnOrKey) : distinctByFnOrKey;\n    this.state.set({ distinctBy });\n  }\n\n  constructor(\n    private state: RxState<{ trackBy: ((i) => any), distinctBy: ((i) => any) }>,\n    private iterableDiffers: IterableDiffers,\n    private cdRef: ChangeDetectorRef,\n    private readonly templateRef: TemplateRef<RxForDifferViewContext<any>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    super();\n    this.state.set({ distinctBy: i => i, trackBy: i => i });\n    this.state.hold(this.afterViewInit$.pipe(\n      tap(() => {\n        this.setupNgDiffer();\n        this.state.hold(this.enter$, i => this.onEnter(i));\n        this.state.hold(this.identityChange$, i => this.onUpdate(i));\n        this.state.hold(this.exit$, i => this.onExit(i));\n      }),\n      )\n    );\n    this.state.hold(this.onDestroy$, () => this.tearDownDirective());\n  }\n/*\n  private setupDiffer() {\n    this.rxDiffer = rxIterableDifferFactory<U & object>({\n      trackBy: this.state.get('trackBy')\n    });\n    this.rxDiffer.connect();\n  }\n*/\n  private setupNgDiffer() {\n    this.differ = this.iterableDiffers.find([]).create((idx, item) => this.state.get('trackBy')(item));\n\n    const differResult$ = this.array$.pipe(\n      map(newData => this.differ.diff(newData)),\n      shareReplay(1)\n    );\n    this.enter$ = differResult$.pipe(fromFor<U>('forEachAddedItem'), mergeMap(a => a));\n    this.move$ = differResult$.pipe(fromFor('forEachMovedItem'), mergeMap(a => a));\n    this.identityChange$ = differResult$.pipe(fromFor('forEachIdentityChange'), mergeMap(a => a));\n    this.exit$ = differResult$.pipe(fromFor('forEachRemovedItem'), mergeMap(a => a));\n    this.cdRef.detectChanges();\n  }\n\n\n  private tearDownDirective() {\n    this.viewContainerRef.clear();\n    this.subscription.unsubscribe();\n  }\n\n  onEnter = (item: U): void => {\n    const key = this.state.get('trackBy')(item);\n    console.log('key', key, item);\n    let existingItem = this.embeddedViews.has(key) ? this.embeddedViews.get(key) : undefined;\n    if (!existingItem) {\n      const view = this.viewContainerRef\n        .createEmbeddedView(this.templateRef, { $implicit: item });\n      existingItem = { view, item };\n      this.embeddedViews.set(key, existingItem);\n      existingItem.view.detectChanges();\n    }\n  };\n\n  onUpdate = (item: U): void => {\n    const key = this.state.get('trackBy')(item);\n    const existingItem = this.embeddedViews.has(key) ? this.embeddedViews.get(key) : undefined;\n    console.log('onUpdate', existingItem , key);\n    if (existingItem) {\n      existingItem.view.context.$implicit = item;\n      existingItem.view.detectChanges();\n    }\n  };\n\n  onExit = (item: U): void => {\n    console.log('onExit', item);\n  };\n\n}\n","import { ConnectableObservable, Observable, Subject, Subscription } from 'rxjs';\nimport { map, pairwise, publishReplay, startWith, tap } from 'rxjs/operators';\nimport { constantPluck } from './utils';\n\nexport interface DifferResult<T> {\n  enter: T[],\n  update: T[],\n  exit: T[],\n}\n\n// Identify items over their index in the array\nexport function diffByIndex<T>(oldData: T[], newData: T[]): DifferResult<T> {\n\n  const oldLength = oldData.length,\n    dataLength = newData.length,\n    enter = [] as T[],\n    update = [] as T[],\n    exit = [] as T[];\n\n  // `i` is defined at the top of the function as it is shared with all `for` loops\n  let i = 0;\n\n  // The counter variable is left out as we use the shared `i` as counter\n  for (; i < dataLength; ++i) {\n    // As we track by index, if a value is provided for that index it belongs to the update set\n    if (oldData[i]) {\n      update[i] = newData[i];\n    }\n    // If no value is present at the current index it belongs to the enter set.\n    else {\n      enter[i] = newData[i];\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  // As `i` was used in the `for` loop for the newData,\n  // the only situation where we can enter this loop is if the old data set is bigger than the new one.\n  for (; i < oldLength; ++i) {\n    // This check is needed to only non-null values belong to the exit set\n    if (oldData[i]) {\n      exit[i] = oldData[i];\n    }\n  }\n\n  return { enter, update, exit } as DifferResult<T>;\n}\n\n// Identify items over a provided key in the array\nexport function diffByKey<T>(oldData: T[], newData: T[], key = (item: T, idx?: number) => idx, distinct = (item: T, idx?: number) => item): DifferResult<T> {\n  let i,\n    keyValue;\n  const dataByKeyValue = new Map,\n    oldDataLength = oldData.length,\n    newDataLength = newData.length,\n    keyValues = new Array(oldDataLength),\n    enter = [],\n    update = [],\n    exit = [];\n\n  // Iterate over the old data and compute the key for each node.\n  for (i = 0; i < oldDataLength; ++i) {\n    const d = oldData[i];\n    if (d) {\n      // Make sure the result is a string by coercing it with `+ ''` at the end\n      keyValues[i] = keyValue = key(d, i) + '';\n      // If multiple nodes have the same key, the duplicates are added to exit set.\n      if (dataByKeyValue.has(keyValue)) {\n        exit[i] = d;\n      }\n      // datum has a unique key result\n      else {\n        dataByKeyValue.set(keyValue, d);\n      }\n    }\n  }\n\n  // Iterate over the old data and compute the key for each datum.\n  for (i = 0; i < newDataLength; ++i) {\n    const d = newData[i];\n    // Make sure the result is a string by coercing it with `+ ''` at the end\n    keyValue = key(d, i) + '';\n\n    // If there a datum associated with this key, join and add it to update.\n    const old = dataByKeyValue.get(keyValue);\n    if (old) {\n      // only update items that are distinct\n      if (distinct) {\n        if (distinct(old) !== distinct(d)) {\n          update[i] = d;\n        }\n      } else {\n        update[i] = d;\n      }\n      // we need to delete this here as we dont want to have them included in the next loop\n      dataByKeyValue.delete(keyValue);\n    }\n      // If there is not (or the key is a duplicate), add it to enter.\n    // @TODO Why key can be a duplicate??\n    else {\n      enter[i] = d;\n    }\n  }\n\n  // Iterate over the old data and add any remaining nodes that were not bound to data to the exit set.\n  for (i = 0; i < oldDataLength; ++i) {\n    const d = oldData[i];\n    // @TODO Why check for reference equality??\n    if ((d) && (dataByKeyValue.get(keyValues[i]) === d)) {\n      exit[i] = d;\n    }\n  }\n\n  return { enter, update, exit };\n}\n\n\nexport function functionalDiffer<T>(oldData: T[], newData: T[], key?: (item: T, idx: number) => any, distinct?: (item: T, idx: number) => any): DifferResult<T> {\n  const diffFn = key ? (o: T[], n: T[]) => diffByKey(o, n, key) : (o: T[], n: T[]) => diffByIndex(o, n);\n  return diffFn(oldData, newData);\n}\n\n\nexport interface RxIterableDiffer<T extends object> {\n  connect: () => Subscription;\n  next: (v: T[]) => void;\n  enter$: Observable<T>;\n  update$: Observable<T>;\n  exit$: Observable<T>;\n}\n\nexport interface RxIterableDifferConfig<T extends object> {\n  trackBy: keyof T | ((i: T) => any);\n  distinctBy?: keyof T | ((i: T) => any)\n}\n\n\nexport function rxIterableDifferFactory<T extends object>(config: RxIterableDifferConfig<T>): RxIterableDiffer<T> {\n  const trackBy = (typeof config.trackBy !== 'function') ? constantPluck(config.trackBy) : config.trackBy;\n  const distinctBy = (typeof config.distinctBy !== 'function') ? constantPluck(config.distinctBy) : config.distinctBy;\n\n  const array$ = new Subject<T[]>();\n  const differResult$: ConnectableObservable<DifferResult<T>> = array$.pipe(\n    startWith([]),\n    pairwise(),\n    tap(console.log),\n    map(([oldData, newData]) => {\n      return functionalDiffer(oldData, newData, trackBy);\n    }),\n    publishReplay(1)\n  ) as ConnectableObservable<DifferResult<T>>;\n\n  return {\n    connect,\n    next,\n    enter$: differResult$.pipe(map(r => r.enter)),\n    update$: differResult$.pipe(map(r => r.update)),\n    exit$: differResult$.pipe(map(r => r.exit))\n  } as RxIterableDiffer<T>;\n\n  // ===\n\n  function connect(): Subscription {\n    return (differResult$ as ConnectableObservable<T>).connect();\n  }\n\n  function next(v: T[]): void {\n    array$.next(v);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { IterableChanges } from '@angular/core';\n\nexport function fromFor<T>(fn: string) {\n  return (o$: Observable<IterableChanges<T>>) => new Observable<T[]>((s) => {\n    const subscription = o$.subscribe(n => {\n      const a: T[] = [];\n      // tslint:disable-next-line:no-unused-expression\n      if(n != null) {\n        n[fn](v => a.push(v.item));\n        s.next(a);\n      } else {\n        s.next([])\n      }\n    });\n    return subscription.unsubscribe;\n  });\n}\n","export * from './rx-differ';\nexport * from './rx-for-differ.directive';\nexport * from './shared.module';\n","import { NgModule } from '@angular/core';\nimport { RxForDifferDirective } from './rx-for-differ.directive';\nimport { RxForDiffer2Directive } from './rx-for-differ2.directive';\n\nconst DECLARATIONS = [RxForDifferDirective,RxForDiffer2Directive];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  imports: [],\n  exports: [DECLARATIONS]\n})\nexport class SharedModule {\n}\n","import { Observable } from 'rxjs';\nimport { distinctUntilChanged, groupBy, map, mergeAll, mergeMap } from 'rxjs/operators';\n\nexport function distinctArray<T>(trackBy: (i: T) => any, distinctBy?: (i: T) => any) {\n  return (o$: Observable<T[]>): Observable<T> => o$.pipe(\n    mergeMap(arr => arr),\n    groupBy(i => trackBy(i)),\n    map(o => distinctBy ? o.pipe(distinctUntilChanged((a, b) => distinctBy(a) === distinctBy(b))) : o),\n    mergeAll()\n  );\n}\n\nexport function constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nexport function constantPluck<T>(x) {\n  return function(i: T) {\n    return i[x];\n  };\n}\n\n\n"],"sourceRoot":"webpack:///"}