{"version":3,"sources":["./src/app/features/tutorials/basics/2-input-bindings/input-bindings.solution.component.ts","./src/app/features/tutorials/basics/2-input-bindings/input-bindings.start.component.ts","./src/app/features/tutorials/basics/solution/demo-basics.adapter.service.ts","./src/app/features/tutorials/basics/3-output-bindings/output-bindings.solution.component.ts","/home/runner/work/rx-angular/rx-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-bar.js","./src/app/features/tutorials/basics/5-side-effects/side-effects.solution.component.ts","./src/app/features/tutorials/basics/6-presenter-pattern/presenter-pattern.container.component.ts","./src/app/features/tutorials/basics/5-side-effects/side-effects.start.component.ts","./src/app/features/tutorials/basics/data-access/list-resource/index.ts","./src/app/features/tutorials/basics/solution/demo-basics.container.component.ts","./src/app/features/tutorials/basics/4-global-state/global-state.solution.component.ts","./src/app/features/tutorials/basics/2-input-bindings/input-bindings-container.component.ts","./src/app/features/tutorials/basics/1-setup/setup.start.component.ts","./src/app/features/tutorials/basics/1-setup/setup-container.component.ts","./src/app/features/tutorials/basics/solution/demo-basics.component.ts","./src/app/features/tutorials/basics/solution/demo-basics.view.html","./src/app/features/tutorials/basics/data-access/list-resource/list.service.ts","./src/app/features/tutorials/basics/3-output-bindings/output-bindings.start.component.ts","./src/app/features/tutorials/basics/4-global-state/global-state-container.component.ts","./src/app/features/tutorials/basics/3-output-bindings/output-bindings-container.component.ts","./src/app/features/tutorials/basics/solution/demo-basics.view-model.service.ts","./src/app/features/tutorials/basics/4-global-state/global-state.start.component.ts","./src/app/features/tutorials/basics/tutorial-basics.module.ts","./src/app/features/tutorials/basics/1-setup/setup.solution.component.ts","./src/app/features/tutorials/basics/5-side-effects/side-effects-container.component.ts","./src/app/features/tutorials/basics/6-presenter-pattern/presenter-pattern.start.component.ts"],"names":[],"mappings":"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","file":"basics-tutorial-basics-module.js","sourcesContent":["import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-input-bindings-solution',\n  template: `\n    <h3>\n      Input Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputBindingsSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({refreshInterval});\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { RxState } from '@rx-angular/state';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\n// The  initial base-state is normally derived form somewhere else automatically. But could also get specified statically here.\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-input-bindings-start',\n  template: `\n    <h3>\n     Input Bindings\n    </h3>\n    {{model$  | async | json}}\n    <mat-expansion-panel\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n            >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ _refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputBindingsStart extends RxState<ComponentState> implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  _refreshInterval: number = initComponentState.refreshInterval;\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this._refreshInterval = refreshInterval;\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this._refreshInterval)\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DemoBasicsItem } from './demo-basics.view-model.service';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { ActivatedRoute } from '@angular/router';\n\n@Injectable()\nexport class DemoBasicsAdapterService extends RxState<any> {\n  loadingSignal$ = this.listService.loadingSignal$;\n  list$: Observable<DemoBasicsItem[]> = this.listService.list$.pipe(\n    map(this.parseListItems)\n  );\n\n  constructor(private listService: ListService, route: ActivatedRoute) {\n    super();\n    this.hold(route.params, () => this.refetchList());\n  }\n\n  refetchList() {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { distinctUntilKeyChanged, map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-output-bindings-solution',\n  template: `\n    <h3>\n      Output Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputBindingsSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({refreshInterval});\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n\n    this.connect('listExpanded', this.listExpandedChanges)\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"primaryValueBar\"];\nclass MatProgressBarBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/** @docs-private */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n    constructor(_elementRef, _ngZone, _animationMode, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        /** Flag that indicates whether NoopAnimations mode is set to true. */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        /** Reference to animation end subscription to be unsubscribed on destroy. */\n        this._animationEndSubscription = Subscription.EMPTY;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n        /** ID of the progress bar. */\n        this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use since\n        // we can't tell the difference between whether\n        // the consumer is using the hash location strategy or not, because `Location` normalizes\n        // both `/#/foo/bar` and `/foo/bar` to the same thing.\n        const path = location ? location.getPathname().split('#')[0] : '';\n        this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    }\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    get value() { return this._value; }\n    set value(v) {\n        this._value = clamp(coerceNumberProperty(v) || 0);\n    }\n    /** Buffer value of the progress bar. Defaults to zero. */\n    get bufferValue() { return this._bufferValue; }\n    set bufferValue(v) { this._bufferValue = clamp(v || 0); }\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    _primaryTransform() {\n        const scale = this.value / 100;\n        return { transform: `scaleX(${scale})` };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    _bufferTransform() {\n        if (this.mode === 'buffer') {\n            const scale = this.bufferValue / 100;\n            return { transform: `scaleX(${scale})` };\n        }\n        return null;\n    }\n    ngAfterViewInit() {\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular((() => {\n            const element = this._primaryValueBar.nativeElement;\n            this._animationEndSubscription =\n                fromEvent(element, 'transitionend')\n                    .pipe(filter(((e) => e.target === element)))\n                    .subscribe(() => {\n                    if (this.mode === 'determinate' || this.mode === 'buffer') {\n                        this._ngZone.run(() => this.animationEnd.next({ value: this.value }));\n                    }\n                });\n        }));\n    }\n    ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n    }\n}\nMatProgressBar.ɵfac = function MatProgressBar_Factory(t) { return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8)); };\nMatProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressBar, selectors: [[\"mat-progress-bar\"]], viewQuery: function MatProgressBar_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n    } }, hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"], hostVars: 4, hostBindings: function MatProgressBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n    } }, inputs: { color: \"color\", mode: \"mode\", value: \"value\", bufferValue: \"bufferValue\" }, outputs: { animationEnd: \"animationEnd\" }, exportAs: [\"matProgressBar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 4, consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]], template: function MatProgressBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"defs\");\n        ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n        ɵngcc0.ɵɵelement(3, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"rect\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n        ɵngcc0.ɵɵelement(8, \"div\", 7);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n    } }, directives: [ɵngcc1.NgStyle], styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatProgressBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n];\nMatProgressBar.propDecorators = {\n    value: [{ type: Input }],\n    bufferValue: [{ type: Input }],\n    _primaryValueBar: [{ type: ViewChild, args: ['primaryValueBar',] }],\n    animationEnd: [{ type: Output }],\n    mode: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-bar',\n                exportAs: 'matProgressBar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                    '[attr.mode]': 'mode',\n                    'class': 'mat-progress-bar',\n                    '[class._mat-animation-noopable]': '_isNoopAnimation'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PROGRESS_BAR_LOCATION]\n            }] }]; }, { animationEnd: [{\n            type: Output\n        }], mode: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], bufferValue: [{\n            type: Input\n        }], _primaryValueBar: [{\n            type: ViewChild,\n            args: ['primaryValueBar']\n        }] }); })();\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressBarModule });\nMatProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressBarModule_Factory(t) { return new (t || MatProgressBarModule)(); }, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, { declarations: function () { return [MatProgressBar]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatProgressBar, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatProgressBar, MatCommonModule],\n                declarations: [MatProgressBar]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n\n//# sourceMappingURL=progress-bar.js.map","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { distinctUntilKeyChanged, map, startWith } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { Subject } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-side-effects-solution',\n  template: `\n    <h3>\n      Side Effects\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"refreshClicks$.next($event)\">\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SideEffectsSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  listExpandedChanges = new Subject<boolean>();\n  refreshClicks$ = new Subject<Event>();\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({refreshInterval});\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n\n    this.connect('listExpanded', this.listExpandedChanges);\n    this.connect('list', this.listService.list$.pipe(map(this.parseListItems)));\n    this.hold(this.refreshClicks$.pipe(startWith(true)), () => this.listService.refetchList())\n  }\n\n  ngOnInit(): void {\n    this.refreshClicks$.next();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-presenter-pattern-container',\n  template: `\n    <h1>Presenter Pattern</h1>\n    <mat-form-field>\n      <label>RefreshInterval {{ refreshInterval$ | async }}</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-presenter-pattern-start [refreshInterval]=\"refreshInterval$ | async\">\n    </rxa-presenter-pattern-start>\n  `,\n})\nexport class PresenterPatternContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { distinctUntilKeyChanged, map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-side-effects-start',\n  template: `\n    <h3>\n      Side Effects\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SideEffectsStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({refreshInterval});\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n\n    this.connect('listExpanded', this.listExpandedChanges)\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","export * from './list.service';\nexport * from './list.server.model';\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-demo-basics4-container',\n  template: `\n      <h1>Solution</h1>\n      <br/>\n      <mat-form-field>\n          <label>RefreshInterval</label>\n          <input\n                  type=\"number\"\n                  (input)=\"refreshIntervalInput$.next($event)\"\n                  matInput\n          />\n      </mat-form-field>\n\n      <rxa-demo-basics [refreshInterval]=\"refreshInterval$ | async\"></rxa-demo-basics>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DemoBasicsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { distinctUntilKeyChanged, map, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-global-state-solution',\n  template: `\n    <h3>\n      Global State\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GlobalStateSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n\n    this.connect('listExpanded', this.listExpandedChanges);\n    this.connect('list', this.listService.list$.pipe(map(this.parseListItems)));\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-input-bindings-container',\n  template: `\n    <h1>Input Bindings</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-input-bindings-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\"\n    >\n    </rxa-input-bindings-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputBindingsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\n// The  initial base-state is normally derived form somewhere else automatically. But could also get specified statically here.\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-setup-start',\n  template: `\n    <h3>\n      Setup\n    </h3>\n    <mat-expansion-panel\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\">\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n            >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ _refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SetupStart implements OnInit, OnDestroy {\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  _refreshInterval: number = initComponentState.refreshInterval;\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this._refreshInterval = refreshInterval;\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {}\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this._refreshInterval)\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-setup-container',\n  template: `\n    <h1>Setup</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-setup-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\">\n    </rxa-setup-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SetupContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { DemoBasicsViewModelService } from './demo-basics.view-model.service';\nimport { RxState } from '@rx-angular/state';\nimport { DemoBasicsAdapterService } from './demo-basics.adapter.service';\n\n@Component({\n  selector: 'rxa-demo-basics',\n  templateUrl: './demo-basics.view.html',\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [DemoBasicsViewModelService, DemoBasicsAdapterService],\n})\nexport class DemoBasicsComponent extends RxState<any> {\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    this.vm.set({ refreshInterval });\n  }\n\n  constructor(\n    public vm: DemoBasicsViewModelService,\n    private ca: DemoBasicsAdapterService\n  ) {\n    super();\n\n    this.vm.connect('list', this.ca.list$);\n    this.vm.connect('isPending', this.ca.loadingSignal$);\n    this.hold(this.vm.refreshListSideEffect$, (_) => this.ca.refetchList());\n  }\n}\n","<h3>Final Example</h3>\n<br />\n<mat-expansion-panel\n  class=\"list\"\n  *ngIf=\"vm.baseModel$ | async as bm\"\n  (expandedChange)=\"vm.listExpandedChanges.next($event)\"\n  [expanded]=\"bm.listExpanded\"\n>\n  <mat-expansion-panel-header style=\"position: relative;\">\n    <mat-progress-bar *ngIf=\"bm.isPending\" [mode]=\"'query'\"></mat-progress-bar>\n    <mat-panel-title>User Name</mat-panel-title>\n    <mat-panel-description>\n      <span *ngIf=\"!bm.listExpanded\"\n        >{{bm.list.length}} Repositories Updated every: {{bm.refreshInterval}}\n        ms\n      </span>\n      <span *ngIf=\"bm.listExpanded\">{{bm.list.length}}</span>\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n\n  <!-- NOTE: in the view the only variable we want to touch is `vm`-->\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"vm.refreshClicks.next($event)\"\n  >\n    Refresh List\n  </button>\n\n  <div *ngIf=\"bm.list.length; else noList\">\n    <mat-list>\n      <mat-list-item *ngFor=\"let item of bm.list\">\n        {{item.name}}\n      </mat-list-item>\n    </mat-list>\n  </div>\n\n  <ng-template #noList>\n    <mat-card>No list given!</mat-card>\n  </ng-template>\n</mat-expansion-panel>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { ListServerItem } from './list.server.model';\nimport { catchError, delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\n\ninterface ListServiceState {\n  list: any[];\n  loading: boolean;\n  error: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ListService {\n  private state$ = new BehaviorSubject<Partial<ListServiceState>>({\n    list: [],\n    loading: false,\n    error: '',\n  });\n\n  list$ = this.state$.pipe(\n    map((s) => s.list),\n    distinctUntilChanged()\n  );\n\n  errorSignal$ = this.state$.pipe(\n    map((s) => s.error),\n    filter((b) => !!b)\n  );\n  successSignal$ = this.state$.pipe(\n    map(({ loading, error }) => ({ loading, error })),\n    filter((o) => o.loading === false && o.error !== '')\n  );\n\n  loadingSignal$ = this.state$.pipe(map(({ loading }) => loading));\n\n  constructor(private http: HttpClient) {\n    this.state$.subscribe(console.log);\n  }\n\n  refetchList() {\n    this.state$.next({ ...this.state$.getValue(), loading: true });\n    this.httpGetListItem({ num: 1 })\n      .pipe(catchError((e) => of({ error: e, loading: false, list: [] })))\n      .subscribe((slice) => {\n        console.log('list: ', this.state$.getValue());\n        return this.state$.next({\n          error: '',\n          list: [...this.state$.value.list, ...slice.list],\n          loading: false,\n        });\n      });\n  }\n\n  httpGetListItem = (arg?: any): Observable<{ list: any[] }> =>\n    of(getData(arg)).pipe(\n      // tslint:disable-next-line:no-bitwise\n      delay(~~(Math.random() * 5000)),\n      map((list) => ({ list }))\n    );\n}\n\nexport function getData(cfg = { num: 5 }): ListServerItem[] {\n  // tslint:disable-next-line:no-bitwise\n  const randId = (s: string) => s + ~~(Math.random() * 100);\n  return new Array(cfg.num).fill(cfg.num).map((_) => ({\n    id: randId('id'),\n    name: randId('name'),\n    created: Date.now() / 1000 + '',\n  }));\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { RxState } from '@rx-angular/state';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\n// The  initial base-state is normally derived form somewhere else automatically. But could also get specified statically here.\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-output-bindings-start',\n  template: `\n    <h3>\n      Output Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputBindingsStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({refreshInterval});\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-output-bindings-container',\n  template: `\n    <h1>Global State</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-global-state-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\"\n    >\n    </rxa-global-state-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalStateContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-output-bindings-container',\n  template: `\n    <h1>Output Bindings</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-output-bindings-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\"\n    >\n    </rxa-output-bindings-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputBindingsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { Injectable } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { merge, Observable, Subject, timer } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\nexport interface DemoBasicsBaseModel {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n  isPending: boolean;\n}\n\nexport interface DemoBasicsView {\n  refreshClicks: Subject<Event>;\n  listExpandedChanges: Subject<boolean>;\n  baseModel$: Observable<DemoBasicsBaseModel>;\n}\n\nconst initState: DemoBasicsBaseModel = {\n  refreshInterval: 1000,\n  listExpanded: true,\n  isPending: true,\n  list: [],\n};\n\n@Injectable()\nexport class DemoBasicsViewModelService extends RxState<DemoBasicsBaseModel>\n  implements DemoBasicsView {\n  baseModel$ = this.select();\n\n  refreshClicks = new Subject<Event>();\n  listExpandedChanges = new Subject<boolean>();\n\n  refreshListSideEffect$ = merge(\n    this.refreshClicks,\n    this.select(\n      map((s) => s.refreshInterval),\n      filter((refreshInterval) => refreshInterval > 4000)\n    ).pipe(switchMap((ms) => timer(ms)))\n  );\n\n  constructor() {\n    super();\n    this.set(initState);\n\n    this.connect('listExpanded', this.listExpandedChanges);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { RxState } from '@rx-angular/state';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\n// The  initial base-state is normally derived form somewhere else automatically. But could also get specified statically here.\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-global-state-start',\n  template: `\n    <h3>\n      Output Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalStateStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({refreshInterval});\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatListModule } from '@angular/material/list';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { SetupContainerComponent } from './1-setup/setup-container.component';\nimport { InputBindingsContainerComponent } from './2-input-bindings/input-bindings-container.component';\nimport { OutputBindingsContainerComponent } from './3-output-bindings/output-bindings-container.component';\nimport { PresenterPatternContainerComponent } from './6-presenter-pattern/presenter-pattern.container.component';\nimport { DemoBasicsContainerComponent } from './solution/demo-basics.container.component';\nimport { GlobalStateContainerComponent } from './4-global-state/global-state-container.component';\nimport { SideEffectsContainerComponent } from './5-side-effects/side-effects-container.component';\nimport { InputBindingsSolution } from './2-input-bindings/input-bindings.solution.component';\nimport { InputBindingsStart } from './2-input-bindings/input-bindings.start.component';\nimport { OutputBindingsStart } from './3-output-bindings/output-bindings.start.component';\nimport { OutputBindingsSolution } from './3-output-bindings/output-bindings.solution.component';\nimport { GlobalStateStart } from './4-global-state/global-state.start.component';\nimport { GlobalStateSolution } from './4-global-state/global-state.solution.component';\nimport { SideEffectsStart } from './5-side-effects/side-effects.start.component';\nimport { SideEffectsSolution } from './5-side-effects/side-effects.solution.component';\nimport { PresenterPatternStart } from './6-presenter-pattern/presenter-pattern.start.component';\nimport { SetupStart } from './1-setup/setup.start.component';\nimport { SetupSolution } from './1-setup/setup.solution.component';\nimport { DemoBasicsComponent } from './solution/demo-basics.component';\n\nexport const ROUTES = [\n  {\n    path: '',\n    redirectTo: 'setup'\n  },\n  {\n    path: 'setup',\n    component: SetupContainerComponent\n  },\n  {\n    path: 'input-bindings',\n    component: InputBindingsContainerComponent\n  },\n  {\n    path: 'output-bindings',\n    component: OutputBindingsContainerComponent\n  },\n  {\n    path: 'global-state',\n    component: GlobalStateContainerComponent\n  },\n  {\n    path: 'side-effects',\n    component: SideEffectsContainerComponent\n  },\n  {\n    path: 'presenter-pattern',\n    component: PresenterPatternContainerComponent\n  },\n  {\n    path: 'solution',\n    component: DemoBasicsContainerComponent\n  }\n];\nconst DECLARATIONS = [\n  SetupContainerComponent,\n  SetupStart,\n  SetupSolution,\n  InputBindingsContainerComponent,\n  InputBindingsStart,\n  InputBindingsSolution,\n  OutputBindingsContainerComponent,\n  OutputBindingsStart,\n  OutputBindingsSolution,\n  GlobalStateContainerComponent,\n  GlobalStateStart,\n  GlobalStateSolution,\n  SideEffectsContainerComponent,\n  SideEffectsStart,\n  SideEffectsSolution,\n  PresenterPatternContainerComponent,\n  PresenterPatternStart,\n  DemoBasicsContainerComponent,\n  DemoBasicsComponent\n];\nexport const materialModules = [\n  MatIconModule,\n  MatListModule,\n  MatCardModule,\n  MatButtonModule,\n  MatExpansionModule,\n  MatBadgeModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatInputModule,\n  MatFormFieldModule\n];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  imports: [CommonModule, materialModules, RouterModule.forChild(ROUTES)],\n  exports: [DECLARATIONS]\n})\nexport class TutorialBasicsModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-setup-solution',\n  template: `\n    <h3>\n      Setup\n    </h3>\n    {{model$  | async | json}}\n    <mat-expansion-panel\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\">\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ _refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SetupSolution extends RxState<ComponentState> implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  _refreshInterval: number = initComponentState.refreshInterval;\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this._refreshInterval = refreshInterval;\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this._refreshInterval)\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-side-effects-container',\n  template: `\n    <h1>Side Effects</h1>\n    <br/>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput/>\n    </mat-form-field>\n\n    <rxa-side-effects-start [refreshInterval]=\"refreshInterval$ | async\">\n    </rxa-side-effects-start>\n  `,\n})\nexport class SideEffectsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { distinctUntilKeyChanged, map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { interval, Subject, Subscription } from 'rxjs';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-presenter-pattern-start',\n  template: `\n    <h3>\n      Side Effects\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PresenterPatternStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n\n    this.connect('listExpanded', this.listExpandedChanges);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n"],"sourceRoot":"webpack:///"}