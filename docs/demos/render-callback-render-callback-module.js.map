{"version":3,"sources":["./src/app/features/fundamentals/render-callback/render-callback-overview.component.ts","./src/app/features/fundamentals/render-callback/render-callback.routes.ts","./src/app/features/fundamentals/render-callback/04/render-callback04.component.ts","./src/app/features/fundamentals/render-callback/components/let.directive.ts","./src/app/features/fundamentals/render-callback/02/render-callback-02.component.ts","./src/app/features/fundamentals/render-callback/components/push.pipe.ts","./src/app/features/fundamentals/render-callback/render-callback.module.ts","./src/app/features/fundamentals/render-callback/03/render-callback-03.component.ts","./src/app/features/fundamentals/render-callback/01/render-callback-01.component.ts"],"names":[],"mappings":"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","file":"render-callback-render-callback-module.js","sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'rxa-render-callback-overview',\n  template: `\n\n  `,\n  styles: [`\n\n\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RenderCallbackOverviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Routes } from '@angular/router';\nimport { RenderCallback01Component } from './01/render-callback-01.component';\nimport { RenderCallback02Component } from './02/render-callback-02.component';\nimport { RenderCallback03Component } from './03/render-callback-03.component';\nimport { RenderCallback04Component } from './04/render-callback04.component';\nimport { RenderCallbackOverviewComponent } from './render-callback-overview.component';\n\n\nexport const RENDER_CALLBACK_ROUTES: Routes = [\n  {\n    path: '',\n    redirectTo: 'render-callback',\n    component: RenderCallbackOverviewComponent,\n  },\n  {\n    path: 'render-callback',\n    component: RenderCallbackOverviewComponent,\n  },\n  {\n    path: 'render-callback-01',\n    component: RenderCallback01Component,\n  },\n  {\n    path: 'render-callback-02',\n    component: RenderCallback02Component,\n  },\n  {\n    path: 'render-callback-03',\n    component: RenderCallback03Component,\n  },\n  {\n    path: 'render-callback-04',\n    component: RenderCallback04Component,\n  },\n];\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  ViewChild\n} from '@angular/core';\nimport { concat, NEVER, of, Subject } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-render-callback-04',\n  template: `\n    <h1>Render Callback example 04</h1>\n    <h4>Multiple rendercallbacks</h4>\n    <h4>RenderStrategy: {{strategyName$ | pushRcb: 'local'}}</h4>\n    <button mat-raised-button unpatch (click)=\"updateClick.next()\">Update</button>\n    <div class=\"example-results\">\n      <div class=\"example-result\">\n        <div class=\"example-box\">\n          <h4 class=\"mat-headline\">Value</h4>\n          {{ content$ | pushRcb: 'local': rendered$ }}\n          <mat-divider></mat-divider>\n          <h4 class=\"mat-headline\">Callback Value</h4>\n          {{ rendered$ | pushRcb: 'local' }}\n        </div>\n      </div>\n      <div class=\"example-result\">\n        <div class=\"example-box\">\n          <h4 class=\"mat-headline\">Value</h4>\n          {{ content$ | pushRcb: 'local': rendered2$ }}\n          <mat-divider></mat-divider>\n          <h4 class=\"mat-headline\">Callback Value</h4>\n          {{ rendered2$ | pushRcb: 'local' }}\n        </div>\n      </div>\n      <div class=\"example-result\">\n        <div class=\"example-box\">\n          <h4 class=\"mat-headline\">Value</h4>\n          {{ content$ | pushRcb: 'local': rendered3$ }}\n          <mat-divider></mat-divider>\n          <h4 class=\"mat-headline\">Callback Value</h4>\n          {{ rendered3$ | pushRcb: 'local' }}\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n      `\n      .example-results {\n        display: flex;\n        width: 100%;\n        justify-content: space-evenly;\n        margin-bottom: 3rem;\n      }\n\n      .example-result {\n        flex-grow: 1;\n      }\n\n      .example-box {\n        display: flex;\n        flex-flow: column;\n        justify-content: center;\n        align-items: center;\n        width: 300px;\n        outline: 1px solid red;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RenderCallback04Component implements AfterViewInit {\n\n  @ViewChild('box') box: ElementRef<HTMLElement>;\n\n  private readonly afterViewInit$ = new Subject();\n\n  readonly strategyName$ = concat(of('local'), NEVER);\n  readonly rendered$ = new Subject<number>();\n  readonly rendered2$ = new Subject<number>();\n  readonly rendered3$ = new Subject<number>();\n  readonly updateClick = new Subject();\n  readonly content$ = this.updateClick.pipe(\n    map(() => Math.random() * 1000),\n    shareReplay(1)\n  );\n\n  constructor(\n    private cdRef: ChangeDetectorRef\n  ) {\n  }\n\n  reset() {\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    this.afterViewInit$.next();\n  }\n\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef} from '@angular/core';\n\nimport { defer, NextObserver, Observable, ObservableInput, Subscription, Unsubscribable, } from 'rxjs';\nimport { filter, map, share } from 'rxjs/operators';\nimport {\n  createTemplateManager,\n  getStrategies,\n  LetDirective,\n  RxTemplateObserver,\n  RxViewContext,\n  TemplateManager\n} from '@rx-angular/template';\n// tslint:disable:nx-enforce-module-boundaries\nimport {\n  createRenderAware,\n  RenderAware,\n  RxNotificationKind,\n  StrategySelection\n} from '../../../../../../../../libs/template/src/lib/core/render-aware';\nimport { DEFAULT_STRATEGY_NAME } from '../../../../../../../../libs/template/src/lib/render-strategies/strategies/strategies-map';\n\nexport interface LetViewContext<T> extends RxViewContext<T> {\n  // to enable `as` syntax we have to assign the directives selector (var as v)\n  rxLet: T;\n}\n\n/**\n * @Directive LetDirective\n *\n * @description\n *\n * The `*rxLet` directive serves a convenient way of binding observables to a view context. Furthermore, it helps\n * you structure view-related models into view context scope (DOM element's scope).\n *\n * Under the hood, it leverages a `RenderStrategy` which in turn takes care of optimizing the change detection\n * of your component or embedded view. The `LetDirective` will render its template and manage change detection after it got an initial\n *   value. So if the incoming `Observable` emits its value lazily (e.g. data coming from `Http`), your template will\n *   be rendered lazily as well. This can very positively impact the initial render performance of your application.\n *\n *\n * ### Problems with `async` and `*ngIf`\n *\n * In Angular, a way of binding an observable to the view could look like that:\n * ```html\n * <ng-container *ngIf=\"observableNumber$ | async as n\">\n *   <app-number [number]=\"n\"></app-number>\n *   <app-number-special [number]=\"n\"></app-number-special>\n * </ng-container>\n * ```\n *\n * The problem is that `*ngIf` interferes with rendering and in case of a `0` (a falsy value) the component\n * would be hidden. This issue doesn't concern the `LetDirective`.\n *\n * The `AsyncPipe` relies on the Zone to be present - it doesn't really trigger change detection by itself.\n * It marks the component and its children as dirty waiting for the Zone to trigger change detection. So, in case\n * you want to create a zone-less application, the `AsyncPipe` won't work as desired. `LetDirective` comes\n * with its own strategies to manage change detection every time a new notification is sent from\n * the bound Observable.\n *\n *\n * ### Features of `*rxLet`\n *\n * Included features for `*rxLet`:\n * - binding is always present. (see \"Problems with `async` and `*ngIf`\" section below)\n * - it takes away the multiple usages of the `async` or `push` pipe\n * - a unified/structured way of handling null and undefined\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or\n *   `ChangeDetectorRef.markForCheck`)\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or\n *   `ɵdetectChanges`)\n * - distinct same values in a row (`distinctUntilChanged` operator),\n * - display custom templates for different observable notifications (rxSuspense, rxNext, rxError, rxComplete)\n * - notify about after changes got rendered to the template (RenderCallback)\n *\n *\n * ### Binding an Observable and using the view context\n *\n * The `*rxLet` directive takes over several things and makes it more convenient and save to work with streams in the\n * template:\n *\n * ```html\n * <ng-container *rxLet=\"observableNumber$; let n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n *\n * <ng-container *rxLet=\"observableNumber$ as n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n * ```\n *\n * In addition to that it provides us information from the whole observable context.\n * We can track the observables:\n * - next value\n * - error occurrence\n * - complete occurrence\n *\n * ```html\n * <ng-container *rxLet=\"observableNumber$; let n; let e = $rxError, let c = $rxComplete\">\n *   <app-number [number]=\"n\" *ngIf=\"!e && !c\"></app-number>\n *   <ng-container *ngIf=\"e\">\n *     There is an error: {{ e }}\n *   </ng-container>\n *   <ng-container *ngIf=\"c\">\n *     Observable completed: {{ c }}\n *   </ng-container>\n * </ng-container>\n * ```\n *\n *\n * ### Using the template-binding\n *\n * You can also use template anchors and display template's content for different observable states:\n * - on complete\n * - on error\n * - on suspense - before the first value is emitted\n *\n * ```html\n * <ng-container\n *   *rxLet=\"\n *     observableNumber$;\n *     let n;\n *     rxError: error;\n *     rxComplete: complete;\n *     rxSuspense: suspense;\n *   \"\n * >\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n * <ng-template #error>ERROR</ng-template>\n * <ng-template #complete>COMPLETE</ng-template>\n * <ng-template #suspense>SUSPENSE</ng-template>\n * ```\n *\n * Internally, `*rxLet` is using a simple \"view memoization\" - it caches all anchored template references and re-uses\n * them whenever the observable notification (next/error/complete) is sent. Then, it only updates the context\n * (e.g. a value from the observable) in the view.\n *\n * ### Using the RenderCallback\n * The RenderCallback notifies users about when the `LetDirective` \"rendered\" the latest values of the\n * active template.\n * At the time the `rendered` callback emits, the DOM should be already updated with the latest changes connected\n * to this instance.\n * The callback will emit the latest value rendered to the template.\n *\n * Since structural directives currently do not support `@Output` bindings, developers have to use other mechanics\n * to access this event.\n * Beyond the traditional approach the `LetDirectives` offers an input property as renderCallback.\n * This enables developers to bind a `NextObserver` (e.g. `Subject`) to the `LetDirective`which will emit after\n * rendering happened.\n *\n * You can choose between using the [Template syntax](https://angular.io/guide/template-syntax), injecting the\n * `LetDirective` as `@ViewChild()` and subscribe the event manually or providing a RenderCallback on your own.\n *\n * Please note that due to the built-in\n *   [coalescing][https://github.com/rx-angular/rx-angular/blob/master/libs/template/docs/concepts.md] can cause this\n *   callback different in situations where multiple `LetDirectives` are used to render the same\n * `Component`. Make sure to subscribe to every instance in your component to avoid missing render\n * notifications.\n *\n * #### RenderCallback Input\n * ```html\n * <ng-container *rxLet=\"content$; let content; strategy: strategyName$; renderCallback: renderCallback$\">\n *    <div class=\"example-box\">\n *        {{ content }}\n *    </div>\n * </ng-container>\n * ```\n * ```ts\n * // inside component:\n * readonly renderCallback$ = new Subject<string>();\n * ```\n * #### Template syntax\n * ```html\n * <!-- template syntax with output binding -->\n * <ng-template let-content\n *    [rxLet]=\"content$\"\n *    (rendered)=\"onTemplateRendered($event)\">\n *  <div class=\"example-box\">\n *    {{ content }}\n *  </div>\n * </ng-template>\n * ```\n * #### ViewChild\n * ```html\n * <div *rxLet=\"content$; let content\" class=\"example-box\">\n *  {{ content }}\n * </div>\n * ```\n * ```ts\n * // inside of your component\n * \\@ViewChild(LetDirective) rxLet: LetDirective<string>;\n * this.rxLet.rendered.subscribe(value => console.log('afterRender', value));\n * ```\n *\n *\n * @docsCategory LetDirective\n * @docsPage LetDirective\n * @publicApi\n */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[rxLetRcb]',\n  exportAs: 'renderNotifier'\n})\nexport class LetRcbDirective<U> implements OnInit, OnDestroy {\n\n  /** @internal */\n  static ngTemplateGuard_rxLet: 'binding';\n\n  /**\n   * @description\n   * All strategies initialized and registered for the `LetDirective`. Pass a name of one the\n   * `strategies` to the `strategy` input to switch between them on the fly.\n   *\n   * @see {@link strategy}\n   */\n  readonly strategies: StrategySelection;\n\n  /**\n   * @description\n   * Object holding logic for managing strategies and change detection for the `LetDirective`.\n   *\n   * @internal\n   */\n  readonly renderAware: RenderAware<U | null | undefined>;\n\n  /**\n   * @description\n   * The Observable to be bound to the context of a template.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   *\n   * @param potentialObservable\n   */\n  @Input()\n  set rxLetRcb(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.renderAware.nextPotentialObservable(potentialObservable);\n  }\n\n  /**\n   * @description\n   * The rendering strategy to be used when rendering with the reactive context within a template.\n   * Use it to dynamically manage your rendering strategy. You can switch the strategies\n   * imperatively (with a string) or by bounding an Observable.\n   * The default strategy is `'local'`.\n   *\n   * @example\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *     <ng-container *rxLet=\"hero$; let hero; strategy: strategy\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *   `\n   * })\n   * export class AppComponent {\n   *   strategy = 'local';\n   * }\n   *\n   * // OR\n   *\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *     <ng-container *rxLet=\"hero$; let hero; strategy: strategy$\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *   `\n   * })\n   * export class AppComponent {\n   *   strategy$ = new BehaviorSubject('local');\n   * }\n   *\n   * @param strategy\n   * @see {@link strategies}\n   */\n  @Input('rxLetRcbStrategy')\n  set strategy(strategy: string | Observable<string> | undefined) {\n    this.renderAware.nextStrategy(strategy || DEFAULT_STRATEGY_NAME);\n  }\n\n  /**\n   * @description\n   * A template to show if the bound Observable is in \"complete\" state.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero; rxComplete: completeTemplate\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   * <ng-template #completeTemplate>\n   *   <mat-icon>thumb_up</mat-icon>\n   * </ng-template>\n   *\n   * @param templateRef\n   */\n  @Input('rxLetRcbRxComplete')\n  set rxComplete(\n    templateRef: TemplateRef<LetViewContext<U | undefined | null> | null>\n  ) {\n    this.templateManager.addTemplateRef('rxComplete', templateRef);\n  }\n\n  /**\n   * @description\n   * A template to show if the bound Observable is in \"error\" state.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero; rxError: errorTemplate\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   * <ng-template #errorTemplate>\n   *   <mat-icon>thumb_down</mat-icon>\n   * </ng-template>\n   *\n   * @param templateRef\n   */\n  @Input('rxLetRcbRxError')\n  set rxError(\n    templateRef: TemplateRef<LetViewContext<U | undefined | null> | null>\n  ) {\n    this.templateManager.addTemplateRef('rxError', templateRef);\n  }\n\n  /**\n   * @description\n   * A template to show before the first value is emitted from the bound Observable.\n   *\n   * @example\n   * <ng-container *rxLet=\"hero$; let hero; rxSuspense: suspenseTemplate\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   * <ng-template #suspenseTemplate>\n   *   <mat-progress-spinner></mat-progress-spinner>\n   * </ng-template>\n   *\n   * @param templateRef\n   */\n  @Input('rxLetRcbRxSuspense')\n  set rxSuspense(\n    templateRef: TemplateRef<LetViewContext<U | undefined | null> | null>\n  ) {\n    this.templateManager.addTemplateRef('rxSuspense', templateRef);\n  }\n\n  /**\n   *\n   * @internal\n   */\n  private _renderObserver: NextObserver<U>;\n  /**\n   * @description\n   * A callback for when the `LetDirective` \"rendered\" the latest values of the active template.\n   * At the time the `rendered` callback emits, the DOM should be already updated with the latest changes connected\n   * to this instance.\n   * The callback will emit the latest value rendered to the template.\n   *\n   * Since structural directives currently do not support `@Output` bindings, the `LetDirective` offers an input\n   * property as renderCallback. This enables developers to bind a `NextObserver` (e.g. `Subject`) to the `LetDirective`\n   * which will emit after rendering happened.\n   *\n   * Please note that due to the built in\n   *   [coalescing][https://github.com/rx-angular/rx-angular/blob/master/libs/template/docs/concepts.md] can cause this\n   *   callback different in situations where multiple `LetDirectives` are used to render the same\n   * `Component`. Make sure to subscribe to every instance in your component to make sure you don't miss render\n   * notifications.\n   *\n   * @example\n   *  <ng-container *rxLet=\"content$; let content; strategy: strategyName$; renderCallback: renderCallback$\">\n   *    <div class=\"example-box\">\n   *        {{ content }}\n   *    </div>\n   *  </ng-container>\n   *\n   * // inside component:\n   * readonly renderCallback$ = new Subject<string>();\n   */\n  @Input('rxLetRcbRenderCallback')\n  set renderCallback(callback: NextObserver<U>) {\n    this._renderObserver = callback;\n    this.subscribeRenderCallback();\n  }\n\n  /**\n   * @description\n   * A callback for when the `LetDirective` \"rendered\" the latest values of the active template.\n   * At the time the `rendered` callback emits, the DOM should be already updated with the latest changes connected\n   * to this instance.\n   * The callback will emit the latest value rendered to the template.\n   *\n   * Since structural directives currently do not support `@Output` bindings, developers have to use other mechanics\n   * to access this event.\n   *\n   * You can still use this Output event by using either the [Template\n   * syntax](https://angular.io/guide/template-syntax) or\n   * injecting the `LetDirective` as `@ViewChild()` and subscribe the event manually.\n   *\n   * Please note that due to the built in\n   *   [coalescing][https://github.com/rx-angular/rx-angular/blob/master/libs/template/docs/concepts.md] can cause this\n   *   callback different in situations where multiple `LetDirectives` are used to render the same\n   * `Component`. Make sure to subscribe to every instance in your component to make sure you don't miss render\n   * notifications.\n   *\n   * @example\n   * <ng-template let-content\n   *    [rxLet]=\"content$\"\n   *    (rendered)=\"onTemplateRendered($event)\">\n   *  <div class=\"example-box\">\n   *    {{ content }}\n   *  </div>\n   * </ng-template>\n   *\n   * <div *rxLet=\"content$; let content\" class=\"example-box\">\n   *  {{ content }}\n   * </div>\n   *\n   * `@ViewChild(LetDirective) rxLet: LetDirective<string>;`\n   * this.rxLet.rendered.subscribe(value => console.log('afterRender', value));\n   */\n  @Output() readonly rendered = defer(() => this.renderAware.rendered$.pipe(\n    // We use defer here as the as otherwise the the `@Output` decorator subscribes earlier than the renderAware\n    // property is assigned\n    filter(({ kind }) => this.templateManager.hasTemplateRef(kind)),\n    map(({ value }) => value),\n    share()\n  ));\n\n  /** @internal */\n  private subscription: Unsubscribable = Subscription.EMPTY;\n\n  /** @internal */\n  private renderCallBackSubscription: Unsubscribable = Subscription.EMPTY;\n\n  /** @internal */\n  private readonly templateManager: TemplateManager<LetViewContext<U | undefined | null>, RxNotificationKind>;\n\n  /** @internal */\n  private readonly initialViewContext: LetViewContext<U> = {\n    $implicit: undefined,\n    rxLet: undefined,\n    $rxError: false,\n    $rxComplete: false,\n    $rxSuspense: false\n  };\n\n  /** @internal */\n  private readonly templateObserver: RxTemplateObserver<U | null | undefined> = {\n    suspense: () => {\n      this.displayInitialView();\n      this.templateManager.updateViewContext({\n        $implicit: undefined,\n        rxLet: undefined,\n        $rxError: false,\n        $rxComplete: false,\n        $rxSuspense: true\n      });\n    },\n    next: (value: U | null | undefined) => {\n      this.templateManager.displayView('rxNext');\n      this.templateManager.updateViewContext({\n        $implicit: value,\n        rxLet: value\n      });\n    },\n    error: (error: Error) => {\n      // fallback to rxNext when there's no template for rxError\n      this.templateManager.hasTemplateRef('rxError')\n      ? this.templateManager.displayView('rxError')\n      : this.templateManager.displayView('rxNext');\n      this.templateManager.updateViewContext({\n        $rxError: error\n      });\n    },\n    complete: () => {\n      // fallback to rxNext when there's no template for rxComplete\n      this.templateManager.hasTemplateRef('rxComplete')\n      ? this.templateManager.displayView('rxComplete')\n      : this.templateManager.displayView('rxNext');\n      this.templateManager.updateViewContext({\n        $rxComplete: true\n      });\n    }\n  };\n\n  /** @internal */\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown | null | undefined\n  ): ctx is LetViewContext<U> {\n    return true;\n  }\n\n  /** @internal */\n  constructor(\n    cdRef: ChangeDetectorRef,\n    private readonly nextTemplateRef: TemplateRef<LetViewContext<U>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    this.strategies = getStrategies({ cdRef });\n    this.templateManager = createTemplateManager(this.viewContainerRef, this.initialViewContext);\n\n    this.renderAware = createRenderAware({\n      strategies: this.strategies,\n      templateObserver: this.templateObserver\n    });\n    this.renderAware.nextStrategy(DEFAULT_STRATEGY_NAME);\n  }\n\n  /** @internal */\n  ngOnInit() {\n    this.templateManager.addTemplateRef('rxNext', this.nextTemplateRef);\n    this.displayInitialView();\n    this.subscription = this.renderAware.subscribe();\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.renderCallBackSubscription.unsubscribe();\n    this.templateManager.destroy();\n  }\n\n  /** @internal */\n  private subscribeRenderCallback(): void {\n    this.renderCallBackSubscription.unsubscribe();\n    if (this._renderObserver) {\n      this.renderCallBackSubscription = this.rendered.subscribe(this._renderObserver);\n    }\n  }\n\n  /** @internal */\n  private displayInitialView = () => {\n    // Display \"suspense\" template if provided\n    if (this.templateManager.hasTemplateRef('rxSuspense')) {\n      this.templateManager.displayView('rxSuspense');\n    }\n  };\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  ViewChild\n} from '@angular/core';\nimport { merge, of, Subject, throwError } from 'rxjs';\nimport { map, scan, shareReplay, switchMap, switchMapTo, take, takeUntil } from 'rxjs/operators';\nimport { LetRcbDirective } from '../components/let.directive';\n\n@Component({\n  selector: 'rxa-render-callback-02',\n  template: `\n    <h1>Render Callback example 02</h1>\n    <h4>Height calculation using ViewChild</h4>\n    <button mat-raised-button unpatch (click)=\"reset()\">Reset</button>\n    <button mat-raised-button unpatch (click)=\"updateClick.next()\">Update content</button>\n    <button mat-raised-button unpatch (click)=\"errorClick.next()\">Error</button>\n    <button mat-raised-button unpatch (click)=\"completeClick.next()\">Complete</button>\n    <rxa-dirty-check></rxa-dirty-check>\n    <div class=\"example-results\">\n      <div class=\"example-result\" style=\"height: 170px; overflow-y: scroll\">\n        <h4>render callback output</h4>\n        <span>rendered$:</span>\n      </div>\n      <div class=\"example-result\">\n        <h4>After value changed</h4>\n        <span>calculated size: <strong>{{ (\n                                            calculatedAfterValue$ | pushRcb: 'local': pushRenderCallback\n                                          ) + 'px' }}</strong></span>\n      </div>\n      <div class=\"example-result\">\n        <h4>After renderCallback</h4>\n        <span>calculated size: <strong>{{ (\n                                            calculatedAfterRender$ | pushRcb: 'local': pushRenderCallback\n                                          ) + 'px' }}</strong></span>\n      </div>\n    </div>\n    <ng-container *rxLetRcb=\"content$; let content;\">\n      <div class=\"example-box\"\n           #box>\n        {{ content }}\n      </div>\n    </ng-container>\n  `,\n  styles: [\n      `\n      .example-results {\n        display: flex;\n        width: 100%;\n        justify-content: space-between;\n        margin-bottom: 3rem;\n      }\n\n      .example-result {\n        flex-grow: 1;\n      }\n\n      .example-box {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 300px;\n        outline: 1px solid red;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RenderCallback02Component implements AfterViewInit {\n\n  @ViewChild('box') box: ElementRef<HTMLElement>;\n  @ViewChild(LetRcbDirective) renderer: LetRcbDirective<string>;\n\n  private readonly afterViewInit$ = new Subject();\n\n  readonly strategyName$ = of('local');\n  readonly updateClick = new Subject();\n  readonly errorClick = new Subject();\n  readonly completeClick = new Subject();\n  private readonly reset$ = new Subject();\n  readonly pushRenderCallback = new Subject();\n  readonly content$ = this.reset$.pipe(\n    switchMap(() => merge(\n      this.updateClick,\n      this.errorClick.pipe(switchMapTo(throwError(new Error('Boom!'))))\n    )),\n    scan(a => !a, false),\n    map(b => b ? sentence() : paragraph()),\n    takeUntil(this.completeClick),\n    shareReplay(1)\n  );\n\n  readonly calculatedAfterRender$ = this.afterViewInit$.pipe(\n    switchMap(() => merge(this.renderer.rendered, this.pushRenderCallback)),\n    map(() => this.box.nativeElement.getBoundingClientRect().height)\n  );\n\n  // afterViewInit$ is needed, otherwise the ViewChild would not be ready\n  readonly calculatedAfterValue$ = this.afterViewInit$.pipe(\n    switchMap(() => this.renderer.rendered.pipe(take(1))),\n    switchMap(() => this.content$.pipe(\n      map(() => this.box.nativeElement.getBoundingClientRect().height)\n    )),\n  );\n\n  constructor(\n    private cdRef: ChangeDetectorRef\n  ) {\n  }\n\n  reset() {\n    this.reset$.next();\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    // this.calculatedAfterRender$.subscribe();\n    this.afterViewInit$.next();\n    this.reset();\n  }\n\n}\n\nfunction sentence(): string {\n  return text(3, 12);\n}\n\n\nfunction paragraph(): string {\n  return text(35, 102);\n}\n\nfunction text(min: number, max: number): string {\n  return 'Lorem Ipsum '.repeat(Math.ceil(Math.max(min, Math.random() * max)));\n}\n","import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform\n} from '@angular/core';\nimport {\n  NextObserver,\n  Observable,\n  ObservableInput, Subscription,\n  Unsubscribable\n} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { getStrategies, RxTemplateObserver } from '@rx-angular/template';\n// tslint:disable:nx-enforce-module-boundaries\nimport { createRenderAware, RenderAware } from '../../../../../../../../libs/template/src/lib/core/render-aware';\nimport { DEFAULT_STRATEGY_NAME } from '../../../../../../../../libs/template/src/lib/render-strategies/strategies/strategies-map';\n\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The `push` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * The current way of binding an observable to the view looks like that:\n *  ```html\n *  {{observable$ | async}}\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | async\"></component>\n * ```\n *\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render all dirty marked\n *     components.\n *\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n *\n * `push` pipe solves that problem.\n *\n * Included Features:\n *  - Take observables or promises, retrieve their values and render the value to the template\n *  - Handling null and undefined values in a clean unified/structured way\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n *  - Distinct same values in a row to increase performance\n *  - Coalescing of change detection calls to boost performance\n *\n * @usageNotes\n *\n * `push` pipe solves that problem. It can be used like shown here:\n * ```html\n * {{observable$ | push}}\n * <ng-container *ngIf=\"observable$ | push as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | push\"></component>\n * ```\n *\n * @publicApi\n */\n@Pipe({ name: 'pushRcb', pure: false })\nexport class PushRcbPipe<U> implements PipeTransform, OnDestroy {\n  private renderedValue: U | null | undefined;\n\n  private readonly subscription: Unsubscribable;\n  private readonly RenderAware: RenderAware<U | null | undefined>;\n  private renderCallbackSubscription: Unsubscribable = Subscription.EMPTY;\n\n  private readonly templateObserver: RxTemplateObserver<U | null | undefined> = {\n    suspense: () => this.renderedValue = undefined,\n    next: (value: U | null | undefined) => this.renderedValue = value\n  };\n\n  constructor(cdRef: ChangeDetectorRef) {\n    this.RenderAware = createRenderAware<U>({\n      strategies: getStrategies({\n        cdRef\n      }),\n      templateObserver: this.templateObserver\n    });\n    this.subscription = this.RenderAware.subscribe();\n  }\n\n  transform<T>(\n    potentialObservable: null,\n    config?: string | Observable<string>,\n    renderCallback?: NextObserver<U>\n  ): null;\n  transform<T>(\n    potentialObservable: undefined,\n    config?: string | Observable<string>,\n    renderCallback?: NextObserver<U>\n  ): undefined;\n  transform<T>(\n    potentialObservable: ObservableInput<T>,\n    config?: string | Observable<string>,\n    renderCallback?: NextObserver<U>\n  ): T;\n  transform<T>(\n    potentialObservable: ObservableInput<T> | null | undefined,\n    config: string | Observable<string> | undefined,\n    renderCallback?: NextObserver<U>\n  ): T | null | undefined {\n    const strategy = config || DEFAULT_STRATEGY_NAME;\n    this.RenderAware.nextStrategy(strategy);\n    this.RenderAware.nextPotentialObservable(potentialObservable);\n    this.subscribeRenderCallback(renderCallback);\n    return this.renderedValue as any;\n  }\n\n  ngOnDestroy(): void {\n    this.renderCallbackSubscription.unsubscribe();\n    this.subscription.unsubscribe();\n  }\n\n  private subscribeRenderCallback( renderCallback?: NextObserver<U>): void {\n    if (renderCallback) {\n      this.renderCallbackSubscription.unsubscribe();\n      this.renderCallbackSubscription = this.RenderAware.rendered$\n        .pipe(map(({ value }) => value))\n        .subscribe(renderCallback);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { RouterModule } from '@angular/router';\nimport { DirtyChecksModule } from '../../../shared/debug-helper/dirty-checks';\nimport { RenderCallback01Component } from './01/render-callback-01.component';\nimport { RenderCallback02Component } from './02/render-callback-02.component';\nimport { RenderCallback03Component } from './03/render-callback-03.component';\nimport { RenderCallback04Component } from './04/render-callback04.component';\nimport { LetRcbDirective } from './components/let.directive';\nimport { PushRcbPipe } from './components/push.pipe';\nimport { RenderCallbackOverviewComponent } from './render-callback-overview.component';\nimport { RENDER_CALLBACK_ROUTES } from './render-callback.routes';\nimport { MatButtonModule } from '@angular/material/button';\nimport { UnpatchEventsModule } from '@rx-angular/template';\n\n@NgModule({\n  declarations: [\n    RenderCallbackOverviewComponent,\n    RenderCallback01Component,\n    RenderCallback02Component,\n    RenderCallback03Component,\n    RenderCallback04Component,\n    LetRcbDirective,\n    PushRcbPipe\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(RENDER_CALLBACK_ROUTES),\n    MatProgressSpinnerModule,\n    MatDividerModule,\n    DirtyChecksModule,\n    MatButtonModule,\n    UnpatchEventsModule\n  ]\n})\nexport class RenderCallbackModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  ViewChild\n} from '@angular/core';\nimport { concat, merge, NEVER, of, Subject, throwError } from 'rxjs';\nimport { map, scan, shareReplay, switchMap, switchMapTo, take, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-render-callback-03',\n  template: `\n    <h1>Render Callback example 03</h1>\n    <h4>Height calculation using LetRenderCallback</h4>\n    <h4>RenderStrategy: {{strategyName$ | pushRcb: 'local'}}</h4>\n    <button mat-raised-button unpatch (click)=\"reset()\">Reset</button>\n    <button mat-raised-button unpatch (click)=\"updateClick.next()\">Update content</button>\n    <button mat-raised-button unpatch (click)=\"errorClick.next()\">Error</button>\n    <button mat-raised-button unpatch (click)=\"completeClick.next()\">Complete</button>\n    <div class=\"example-results\">\n      <div class=\"example-result\" style=\"height: 170px; overflow-y: scroll\">\n        <h4>render callback output</h4>\n        <span>rendered$:</span>\n      </div>\n      <div class=\"example-result\">\n        <h4>After value changed</h4>\n        <span>calculated size: <strong>{{ (\n                                            calculatedAfterValue$ | pushRcb: 'local': rendered$\n                                          ) + 'px' }}</strong></span>\n      </div>\n      <div class=\"example-result\">\n        <h4>After renderCallback</h4>\n        <span>calculated size: <strong>{{ (\n                                            calculatedAfterRender$ | pushRcb: 'local': rendered$\n                                          ) + 'px' }}</strong></span>\n      </div>\n    </div>\n    <ng-container *rxLetRcb=\"content$; let content; renderCallback: rendered$\">\n      <div class=\"example-box\"\n           #box>\n        {{ content }}\n      </div>\n    </ng-container>\n  `,\n  styles: [\n      `\n      .example-results {\n        display: flex;\n        width: 100%;\n        justify-content: space-evenly;\n        margin-bottom: 3rem;\n      }\n\n      .example-result {\n        flex-grow: 1;\n      }\n\n      .example-box {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 300px;\n        outline: 1px solid red;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RenderCallback03Component implements AfterViewInit {\n\n  @ViewChild('box') box: ElementRef<HTMLElement>;\n\n  private readonly afterViewInit$ = new Subject();\n\n  readonly strategyName$ = concat(of('local'), NEVER);\n  readonly rendered$ = new Subject<string>();\n  readonly updateClick = new Subject();\n  readonly errorClick = new Subject();\n  readonly completeClick = new Subject();\n  private readonly reset$ = new Subject();\n  readonly content$ = this.reset$.pipe(\n    switchMap(() => merge(\n      this.updateClick,\n      this.errorClick.pipe(switchMapTo(throwError(new Error('Boom!'))))\n    )),\n    scan(a => !a, false),\n    map(b => b ? sentence() : paragraph()),\n    takeUntil(this.completeClick),\n    shareReplay(1)\n  );\n\n  readonly calculatedAfterRender$ = this.afterViewInit$.pipe(\n    switchMap(() => this.rendered$),\n    tap(console.log),\n    map(() => this.box.nativeElement.getBoundingClientRect().height)\n  );\n\n  // afterViewInit$ is needed, otherwise the ViewChild would not be ready\n  readonly calculatedAfterValue$ = this.afterViewInit$.pipe(\n    switchMap(() => this.rendered$.pipe(take(1))),\n    switchMap(() => this.content$.pipe(\n      map(() => this.box.nativeElement.getBoundingClientRect().height)\n    )),\n  );\n\n  constructor(\n    private cdRef: ChangeDetectorRef\n  ) {\n  }\n\n  reset() {\n    this.reset$.next();\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    this.afterViewInit$.next();\n    this.reset();\n  }\n\n}\n\nfunction sentence(): string {\n  return text(3, 12);\n}\n\n\nfunction paragraph(): string {\n  return text(35, 102);\n}\n\nfunction text(min: number, max: number): string {\n  return 'Lorem Ipsum '.repeat(Math.ceil(Math.max(min, Math.random() * max)));\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  ViewChild\n} from '@angular/core';\nimport { merge, of, Subject, throwError } from 'rxjs';\nimport { map, scan, shareReplay, switchMap, switchMapTo, take, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-render-callback-01',\n  template: `\n    <h1>Render Callback example 01</h1>\n    <h4>Height calculation using rendered$ Event</h4>\n    <button mat-raised-button [unpatch] (click)=\"reset()\">Reset</button>\n    <button mat-raised-button [unpatch] (click)=\"updateClick.next()\">Update content</button>\n    <button mat-raised-button [unpatch] (click)=\"errorClick.next()\">Error</button>\n    <button mat-raised-button [unpatch] (click)=\"completeClick.next()\">Complete</button>\n    <div class=\"example-results\">\n      <div class=\"example-result\" style=\"height: 170px; overflow-y: scroll\">\n        <h4>render callback output</h4>\n        <span>rendered$:</span>\n      </div>\n      <div class=\"example-result\">\n        <h4>After value changed</h4>\n        <span>calculated size: <strong>{{ (\n                                            calculatedAfterValue$ | pushRcb: 'local': rendered$\n                                          ) + 'px' }}</strong></span>\n      </div>\n      <div class=\"example-result\">\n        <h4>After renderCallback</h4>\n        <span>calculated size: <strong>{{ (\n                                            calculatedAfterRender$ | pushRcb: 'local': rendered$\n                                          ) + 'px' }}</strong></span>\n      </div>\n    </div>\n    <ng-template let-content\n                 [rxLetRcb]=\"content$\"\n                 (rendered)=\"rendered$.next($event)\">\n      <div class=\"example-box\"\n           #box>\n        {{ content }}\n      </div>\n    </ng-template>\n  `,\n  styles: [\n      `\n      .example-results {\n        display: flex;\n        width: 100%;\n        justify-content: space-evenly;\n        margin-bottom: 3rem;\n      }\n\n      .example-result {\n        flex-grow: 1;\n      }\n\n      .example-box {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 300px;\n        outline: 1px solid red;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RenderCallback01Component implements AfterViewInit {\n\n  @ViewChild('box') box: ElementRef<HTMLElement>;\n\n  private readonly afterViewInit$ = new Subject();\n\n  readonly rendered$ = new Subject<number>();\n  readonly updateClick = new Subject();\n  readonly errorClick = new Subject();\n  readonly completeClick = new Subject();\n  private readonly reset$ = new Subject();\n  readonly content$ = this.reset$.pipe(\n    switchMap(() => merge(\n      this.updateClick,\n      this.errorClick.pipe(switchMapTo(throwError(new Error('Boom!'))))\n    )),\n    scan(a => !a, false),\n    map(b => b ? sentence() : paragraph()),\n    takeUntil(this.completeClick),\n    shareReplay(1)\n  );\n\n  readonly calculatedAfterRender$ = this.afterViewInit$.pipe(\n    switchMap(() => this.rendered$),\n    map(() => this.box.nativeElement.getBoundingClientRect().height)\n  );\n\n  // afterViewInit$ is needed, otherwise the ViewChild would not be ready\n  readonly calculatedAfterValue$ = this.afterViewInit$.pipe(\n    switchMap(() => this.rendered$.pipe(take(1))),\n    switchMap(() => this.content$.pipe(\n      map(() => this.box.nativeElement.getBoundingClientRect().height)\n    )),\n  );\n\n  constructor(\n    private cdRef: ChangeDetectorRef\n  ) {\n  }\n\n  reset() {\n    this.reset$.next();\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    this.afterViewInit$.next();\n    this.reset();\n  }\n\n}\n\nfunction sentence(): string {\n  return text(3, 12);\n}\n\n\nfunction paragraph(): string {\n  return text(35, 102);\n}\n\nfunction text(min: number, max: number): string {\n  return 'Lorem Ipsum '.repeat(Math.ceil(Math.max(min, Math.random() * max)));\n}\n"],"sourceRoot":"webpack:///"}